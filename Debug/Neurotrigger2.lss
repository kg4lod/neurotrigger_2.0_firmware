
Neurotrigger2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  000018d6  0000196a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000115  00802004  00802004  0000196e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000020c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d7f  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b60  00000000  00000000  00005fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001252  00000000  00000000  00006b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d4  00000000  00000000  00007d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cc0  00000000  00000000  00008450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001083  00000000  00000000  00009110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000a193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_2>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ec:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_59>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__vector_68>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	10 e2       	ldi	r17, 0x20	; 32
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e6 ed       	ldi	r30, 0xD6	; 214
     18c:	f8 e1       	ldi	r31, 0x18	; 24
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a4 30       	cpi	r26, 0x04	; 4
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	11 e2       	ldi	r17, 0x21	; 33
     19c:	a4 e0       	ldi	r26, 0x04	; 4
     19e:	b0 e2       	ldi	r27, 0x20	; 32
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a9 31       	cpi	r26, 0x19	; 25
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 15 02 	call	0x42a	; 0x42a <main>
     1ae:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <ac_output>:
	ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
	ac_output(ENABLE); //AC output to pin PA7;
}

void ac_output(uint8_t config){
	switch(config){
     1b6:	89 32       	cpi	r24, 0x29	; 41
     1b8:	21 f4       	brne	.+8      	; 0x1c2 <ac_output+0xc>
	case DISABLE:
		ACA.CTRLA = 0x00; //NO AC output to pin PA7;
     1ba:	e0 e8       	ldi	r30, 0x80	; 128
     1bc:	f3 e0       	ldi	r31, 0x03	; 3
     1be:	14 82       	std	Z+4, r1	; 0x04
		break;
     1c0:	08 95       	ret
	case ENABLE:
	default:
		ACA.CTRLA = 0x01; //AC output to pin PA7;	
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	e0 e8       	ldi	r30, 0x80	; 128
     1c6:	f3 e0       	ldi	r31, 0x03	; 3
     1c8:	84 83       	std	Z+4, r24	; 0x04
     1ca:	08 95       	ret

000001cc <init_ac>:

//Handles the Analog Comparator

void init_ac(){
	//hysterysis options: 0mV, 20mV, 50mV
	ACA.AC0CTRL = B8(00001101); //enable AC0; 50mV hysterysis; no interrupts; high-speed mode
     1cc:	e0 e8       	ldi	r30, 0x80	; 128
     1ce:	f3 e0       	ldi	r31, 0x03	; 3
     1d0:	8d e0       	ldi	r24, 0x0D	; 13
     1d2:	80 83       	st	Z, r24
	ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
     1d4:	83 e0       	ldi	r24, 0x03	; 3
     1d6:	82 83       	std	Z+2, r24	; 0x02
	ac_output(ENABLE); //AC output to pin PA7;
     1d8:	8a e2       	ldi	r24, 0x2A	; 42
     1da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ac_output>
}
     1de:	08 95       	ret

000001e0 <ac_hysteresis>:
//#############################################################
//## ACs
//#############################################################

void ac_hysteresis(uint8_t amount){
	switch(amount){
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	31 f0       	breq	.+12     	; 0x1f0 <ac_hysteresis+0x10>
     1e4:	82 30       	cpi	r24, 0x02	; 2
     1e6:	41 f4       	brne	.+16     	; 0x1f8 <ac_hysteresis+0x18>
	case LARGE:
		ACA.AC0CTRL = B8(00001101); //enable AC0; 50mV hysterysis; no interrupts; high-speed mode
     1e8:	8d e0       	ldi	r24, 0x0D	; 13
     1ea:	80 93 80 03 	sts	0x0380, r24
		break;
     1ee:	08 95       	ret
	case SMALL:
		ACA.AC0CTRL = B8(00001011); //enable AC0; 20mV hysterysis; no interrupts; high-speed mode
     1f0:	8b e0       	ldi	r24, 0x0B	; 11
     1f2:	80 93 80 03 	sts	0x0380, r24
		break;
     1f6:	08 95       	ret
	case NONE:
	default:
		ACA.AC0CTRL = B8(00001001); //enable AC0; no hysterysis; no interrupts; high-speed mode		
     1f8:	89 e0       	ldi	r24, 0x09	; 9
     1fa:	80 93 80 03 	sts	0x0380, r24
     1fe:	08 95       	ret

00000200 <ac_polarity>:

//Sets output polarity (e.g. active high or active low output)
void ac_polarity(uint8_t polarity){
	//reverse the comparator inputs to reverse the output polarity
	//pin I/O functions are overridden by the AC unit so I/O inversion is ineffective
	if (polarity == IDLE_HIGH){
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	29 f4       	brne	.+10     	; 0x20e <ac_polarity+0xe>
		ACA.AC0MUXCTRL = B8(00101000); //Pos. input = PA5; Neg. Input = PA0; 
     204:	88 e2       	ldi	r24, 0x28	; 40
     206:	e0 e8       	ldi	r30, 0x80	; 128
     208:	f3 e0       	ldi	r31, 0x03	; 3
     20a:	82 83       	std	Z+2, r24	; 0x02
     20c:	08 95       	ret
	}
	else {
		ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	e0 e8       	ldi	r30, 0x80	; 128
     212:	f3 e0       	ldi	r31, 0x03	; 3
     214:	82 83       	std	Z+2, r24	; 0x02
     216:	08 95       	ret

00000218 <service_ac>:
	}
}

void service_ac(){	
}
     218:	08 95       	ret

0000021a <init_adc>:
#include "adc.h"

//Handles the ADC

void init_adc(){
	ADCA.REFCTRL = B8(00010000); //Use AVCC/1.6 = 2.063V as reference (highest allowed)
     21a:	e0 e0       	ldi	r30, 0x00	; 0
     21c:	f2 e0       	ldi	r31, 0x02	; 2
     21e:	80 e1       	ldi	r24, 0x10	; 16
     220:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = B8(00000000); //12bit-right adjusted; One-shot conversion
     222:	11 82       	std	Z+1, r1	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	90 83       	st	Z, r25
	ADCA.CH0.MUXCTRL = B8(00010000); //CH0 converts from PA2
     228:	81 a3       	lds	r24, 0x51
	ADCA.CH1.MUXCTRL = B8(00011000); //CH1 converts from PA3
     22a:	88 e1       	ldi	r24, 0x18	; 24
     22c:	81 a7       	lds	r24, 0x71
}
     22e:	08 95       	ret

00000230 <adc_ch0>:
//#############################################################

//Performs a single 12-bit conversion on ADC CH0
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch0(){
	ADCA.CH0.CTRL = B8(10000001); //Single ended input mode; No gain
     230:	81 e8       	ldi	r24, 0x81	; 129
     232:	e0 e0       	ldi	r30, 0x00	; 0
     234:	f2 e0       	ldi	r31, 0x02	; 2
     236:	80 a3       	lds	r24, 0x50
	while(ADCA.CH0.INTFLAGS == 0x00); //wait for conversion to complete
     238:	83 a1       	lds	r24, 0x43
     23a:	88 23       	and	r24, r24
     23c:	e9 f3       	breq	.-6      	; 0x238 <adc_ch0+0x8>
	ADCA.CH0.INTFLAGS = 0x01; //clear the conversion complete flag
     23e:	e0 e0       	ldi	r30, 0x00	; 0
     240:	f2 e0       	ldi	r31, 0x02	; 2
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	83 a3       	lds	r24, 0x53
	return ADCA.CH0.RES;
     246:	84 a1       	lds	r24, 0x44
     248:	95 a1       	lds	r25, 0x45
}
     24a:	08 95       	ret

0000024c <adc_ch1>:

//Performs a single 12-bit conversion on ADC CH1
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch1(){
	ADCA.CH1.CTRL = B8(10000001); //Single ended input mode; No gain
     24c:	81 e8       	ldi	r24, 0x81	; 129
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	80 a7       	lds	r24, 0x70
	while(ADCA.CH1.INTFLAGS == 0x00); //wait for conversion to complete
     254:	83 a5       	lds	r24, 0x63
     256:	88 23       	and	r24, r24
     258:	e9 f3       	breq	.-6      	; 0x254 <adc_ch1+0x8>
	ADCA.CH1.INTFLAGS = 0x01; //clear the conversion complete flag
     25a:	e0 e0       	ldi	r30, 0x00	; 0
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	83 a7       	lds	r24, 0x73
	return ADCA.CH1.RES;
     262:	84 a5       	lds	r24, 0x64
     264:	95 a5       	lds	r25, 0x65
}
     266:	08 95       	ret

00000268 <adc_ch0_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     27a:	10 92 0b 20 	sts	0x200B, r1
     27e:	10 92 0c 20 	sts	0x200C, r1
	adc_min = 0xFFFF;
     282:	8f ef       	ldi	r24, 0xFF	; 255
     284:	9f ef       	ldi	r25, 0xFF	; 255
     286:	80 93 0d 20 	sts	0x200D, r24
     28a:	90 93 0e 20 	sts	0x200E, r25
	while(i < num_to_avg){
     28e:	01 15       	cp	r16, r1
     290:	11 05       	cpc	r17, r1
     292:	49 f1       	breq	.+82     	; 0x2e6 <adc_ch0_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     294:	c0 e0       	ldi	r28, 0x00	; 0
     296:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     298:	cc 24       	eor	r12, r12
     29a:	dd 24       	eor	r13, r13
     29c:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch0();
     29e:	0e 94 18 01 	call	0x230	; 0x230 <adc_ch0>
		sum += intermediate; //for averaging
     2a2:	ac 01       	movw	r20, r24
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	c4 0e       	add	r12, r20
     2aa:	d5 1e       	adc	r13, r21
     2ac:	e6 1e       	adc	r14, r22
     2ae:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     2b0:	20 91 0d 20 	lds	r18, 0x200D
     2b4:	30 91 0e 20 	lds	r19, 0x200E
     2b8:	82 17       	cp	r24, r18
     2ba:	93 07       	cpc	r25, r19
     2bc:	20 f4       	brcc	.+8      	; 0x2c6 <adc_ch0_stats+0x5e>
     2be:	80 93 0d 20 	sts	0x200D, r24
     2c2:	90 93 0e 20 	sts	0x200E, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     2c6:	20 91 0b 20 	lds	r18, 0x200B
     2ca:	30 91 0c 20 	lds	r19, 0x200C
     2ce:	28 17       	cp	r18, r24
     2d0:	39 07       	cpc	r19, r25
     2d2:	20 f4       	brcc	.+8      	; 0x2dc <adc_ch0_stats+0x74>
     2d4:	80 93 0b 20 	sts	0x200B, r24
     2d8:	90 93 0c 20 	sts	0x200C, r25
		i++;
     2dc:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     2de:	c0 17       	cp	r28, r16
     2e0:	d1 07       	cpc	r29, r17
     2e2:	e9 f6       	brne	.-70     	; 0x29e <adc_ch0_stats+0x36>
     2e4:	03 c0       	rjmp	.+6      	; 0x2ec <adc_ch0_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     2e6:	cc 24       	eor	r12, r12
     2e8:	dd 24       	eor	r13, r13
     2ea:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     2ec:	00 93 08 20 	sts	0x2008, r16
	adc_avg = sum / num_to_avg;
     2f0:	98 01       	movw	r18, r16
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	c7 01       	movw	r24, r14
     2f8:	b6 01       	movw	r22, r12
     2fa:	0e 94 47 0c 	call	0x188e	; 0x188e <__udivmodsi4>
     2fe:	20 93 09 20 	sts	0x2009, r18
     302:	30 93 0a 20 	sts	0x200A, r19
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	08 95       	ret

00000318 <adc_ch1_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     32a:	10 92 0b 20 	sts	0x200B, r1
     32e:	10 92 0c 20 	sts	0x200C, r1
	adc_min = 0xFFFF;
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	9f ef       	ldi	r25, 0xFF	; 255
     336:	80 93 0d 20 	sts	0x200D, r24
     33a:	90 93 0e 20 	sts	0x200E, r25
	while(i < num_to_avg){
     33e:	01 15       	cp	r16, r1
     340:	11 05       	cpc	r17, r1
     342:	49 f1       	breq	.+82     	; 0x396 <adc_ch1_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     344:	c0 e0       	ldi	r28, 0x00	; 0
     346:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     348:	cc 24       	eor	r12, r12
     34a:	dd 24       	eor	r13, r13
     34c:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch1();
     34e:	0e 94 26 01 	call	0x24c	; 0x24c <adc_ch1>
		sum += intermediate; //for averaging
     352:	ac 01       	movw	r20, r24
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	c4 0e       	add	r12, r20
     35a:	d5 1e       	adc	r13, r21
     35c:	e6 1e       	adc	r14, r22
     35e:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     360:	20 91 0d 20 	lds	r18, 0x200D
     364:	30 91 0e 20 	lds	r19, 0x200E
     368:	82 17       	cp	r24, r18
     36a:	93 07       	cpc	r25, r19
     36c:	20 f4       	brcc	.+8      	; 0x376 <adc_ch1_stats+0x5e>
     36e:	80 93 0d 20 	sts	0x200D, r24
     372:	90 93 0e 20 	sts	0x200E, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     376:	20 91 0b 20 	lds	r18, 0x200B
     37a:	30 91 0c 20 	lds	r19, 0x200C
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	20 f4       	brcc	.+8      	; 0x38c <adc_ch1_stats+0x74>
     384:	80 93 0b 20 	sts	0x200B, r24
     388:	90 93 0c 20 	sts	0x200C, r25
		i++;
     38c:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     38e:	c0 17       	cp	r28, r16
     390:	d1 07       	cpc	r29, r17
     392:	e9 f6       	brne	.-70     	; 0x34e <adc_ch1_stats+0x36>
     394:	03 c0       	rjmp	.+6      	; 0x39c <adc_ch1_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     396:	cc 24       	eor	r12, r12
     398:	dd 24       	eor	r13, r13
     39a:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     39c:	00 93 08 20 	sts	0x2008, r16
	adc_avg = sum / num_to_avg;
     3a0:	98 01       	movw	r18, r16
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 47 0c 	call	0x188e	; 0x188e <__udivmodsi4>
     3ae:	20 93 09 20 	sts	0x2009, r18
     3b2:	30 93 0a 20 	sts	0x200A, r19
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	08 95       	ret

000003c8 <service_adc>:

void service_adc(){	
}
     3c8:	08 95       	ret

000003ca <init_dac>:
#include "ui.h"

//Handles the DAC for PORTB

void init_dac(){
	DACB.CTRLA = B8(00001101); //enable DAC and both output pins
     3ca:	e0 e2       	ldi	r30, 0x20	; 32
     3cc:	f3 e0       	ldi	r31, 0x03	; 3
     3ce:	8d e0       	ldi	r24, 0x0D	; 13
     3d0:	80 83       	st	Z, r24
	DACB.CTRLB = B8(01000000); //enable sample-and-hold to allow for independent output operation
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC = B8(00001000); //use AVCC as the reference
     3d6:	88 e0       	ldi	r24, 0x08	; 8
     3d8:	82 83       	std	Z+2, r24	; 0x02
}
     3da:	08 95       	ret

000003dc <dac_output0>:

void dac_output0(uint8_t config){
	switch(config){
     3dc:	89 32       	cpi	r24, 0x29	; 41
     3de:	31 f4       	brne	.+12     	; 0x3ec <dac_output0+0x10>
	case DISABLE:
		DACB.CTRLA = DACB.CTRLA & B8(11111011); //NO DAC output to pin PB2
     3e0:	e0 e2       	ldi	r30, 0x20	; 32
     3e2:	f3 e0       	ldi	r31, 0x03	; 3
     3e4:	80 81       	ld	r24, Z
     3e6:	8b 7f       	andi	r24, 0xFB	; 251
     3e8:	80 83       	st	Z, r24
		break;
     3ea:	08 95       	ret
	case ENABLE:
	default:
		DACB.CTRLA = DACB.CTRLA | B8(00000100); //DAC output to pin PB2
     3ec:	e0 e2       	ldi	r30, 0x20	; 32
     3ee:	f3 e0       	ldi	r31, 0x03	; 3
     3f0:	80 81       	ld	r24, Z
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	80 83       	st	Z, r24
     3f6:	08 95       	ret

000003f8 <dac_out0>:
//## DACs
//#############################################################

//DAC's are 12 bit valued -- numbers outside this range will overflow silently
uint16_t dac_out0(uint16_t value){
	DACB.CH0DATA = value; 
     3f8:	e0 e2       	ldi	r30, 0x20	; 32
     3fa:	f3 e0       	ldi	r31, 0x03	; 3
     3fc:	80 8f       	std	Z+24, r24	; 0x18
     3fe:	91 8f       	std	Z+25, r25	; 0x19
	return DACB.CH0DATA;
     400:	80 8d       	ldd	r24, Z+24	; 0x18
     402:	91 8d       	ldd	r25, Z+25	; 0x19
}	
     404:	08 95       	ret

00000406 <dac_out1>:
uint16_t dac_out1(uint16_t value){
	DACB.CH1DATA = value;
     406:	e0 e2       	ldi	r30, 0x20	; 32
     408:	f3 e0       	ldi	r31, 0x03	; 3
     40a:	82 8f       	std	Z+26, r24	; 0x1a
     40c:	93 8f       	std	Z+27, r25	; 0x1b
	return DACB.CH1DATA;
     40e:	82 8d       	ldd	r24, Z+26	; 0x1a
     410:	93 8d       	ldd	r25, Z+27	; 0x1b
}	
     412:	08 95       	ret

00000414 <dac_read0>:

uint16_t dac_read0() {return DACB.CH0DATA;}
     414:	e0 e2       	ldi	r30, 0x20	; 32
     416:	f3 e0       	ldi	r31, 0x03	; 3
     418:	80 8d       	ldd	r24, Z+24	; 0x18
     41a:	91 8d       	ldd	r25, Z+25	; 0x19
     41c:	08 95       	ret

0000041e <dac_read1>:
uint16_t dac_read1() {return DACB.CH1DATA;}
     41e:	e0 e2       	ldi	r30, 0x20	; 32
     420:	f3 e0       	ldi	r31, 0x03	; 3
     422:	82 8d       	ldd	r24, Z+26	; 0x1a
     424:	93 8d       	ldd	r25, Z+27	; 0x1b
     426:	08 95       	ret

00000428 <service_dac>:

void service_dac(){	
}
     428:	08 95       	ret

0000042a <main>:
	uint8_t blah;
	uint16_t blah16;
	int8_t updown;

	//[LED's, Button, & Switches]
		init_ui(); //init LED's first so that they are available for debugging
     42a:	0e 94 5f 0b 	call	0x16be	; 0x16be <init_ui>

	//[CPU CLOCK]
		//Boot up and configure oscillator
			OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
     42e:	e0 e5       	ldi	r30, 0x50	; 80
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	82 e2       	ldi	r24, 0x22	; 34
     434:	82 83       	std	Z+2, r24	; 0x02
			OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
     436:	8b e0       	ldi	r24, 0x0B	; 11
     438:	80 83       	st	Z, r24
		//Wait for stability
			led_on(LED_LEFT);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 a5 0b 	call	0x174a	; 0x174a <led_on>
			//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
			while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
     440:	e0 e5       	ldi	r30, 0x50	; 80
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	81 81       	ldd	r24, Z+1	; 0x01
     446:	8b 30       	cpi	r24, 0x0B	; 11
     448:	e9 f7       	brne	.-6      	; 0x444 <main+0x1a>
			led_off(LED_LEFT);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <led_off>
		//Configure 
			OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
     450:	e0 e5       	ldi	r30, 0x50	; 80
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	86 83       	std	Z+6, r24	; 0x06
			DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 93 60 00 	sts	0x0060, r24
		//Switch system clock over to stable RC oscillator
			//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
			//----REQUIRES CONFIGURATION PROTECTION REGISTER 
			CCP = CCP_IOREG_gc; //disable change protection for IO register
     45e:	98 ed       	ldi	r25, 0xD8	; 216
     460:	94 bf       	out	0x34, r25	; 52
			CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     462:	80 93 40 00 	sts	0x0040, r24
			OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
     466:	8a e0       	ldi	r24, 0x0A	; 10
     468:	80 83       	st	Z, r24
		//Now running live at 32MHz		

	//[UARTs]
		init_uart(&uctrl, BAUD_115200);
     46a:	80 ea       	ldi	r24, 0xA0	; 160
     46c:	9a e0       	ldi	r25, 0x0A	; 10
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	0e 94 db 05 	call	0xbb6	; 0xbb6 <init_uart>
		init_uart_buffer(&uctrl);
     474:	80 ea       	ldi	r24, 0xA0	; 160
     476:	9a e0       	ldi	r25, 0x0A	; 10
     478:	0e 94 90 0a 	call	0x1520	; 0x1520 <init_uart_buffer>
		init_uart(&udata, BAUD_115200);
     47c:	80 eb       	ldi	r24, 0xB0	; 176
     47e:	99 e0       	ldi	r25, 0x09	; 9
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	0e 94 db 05 	call	0xbb6	; 0xbb6 <init_uart>

	//[ADC]
		init_adc();
     486:	0e 94 0d 01 	call	0x21a	; 0x21a <init_adc>

	//[DAC]
		//dac0 is background level
		//dac1 is threshold level
		init_dac();
     48a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <init_dac>

	//[AC]
		init_ac();
     48e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_ac>

	//[PWM] 
		init_pwm();
     492:	0e 94 a1 03 	call	0x742	; 0x742 <init_pwm>

	//[Realtime Loop Timer]
		//Use PortC's T/C0
		TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
     496:	e0 e0       	ldi	r30, 0x00	; 0
     498:	f8 e0       	ldi	r31, 0x08	; 8
     49a:	87 e0       	ldi	r24, 0x07	; 7
     49c:	80 83       	st	Z, r24
		//TCC0.PER = 31; //992uS per timer period
		TCC0.PER = 100;
     49e:	84 e6       	ldi	r24, 0x64	; 100
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	86 a3       	lds	r24, 0x56
     4a4:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
		PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
     4a6:	87 e8       	ldi	r24, 0x87	; 135
     4a8:	e0 ea       	ldi	r30, 0xA0	; 160
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	82 83       	std	Z+2, r24	; 0x02
		sei(); //ENABLE INTERRUPTS AND GO LIVE!
     4ae:	78 94       	sei

	//[RTOS START!]	
		blah = 1;
		blah16 = 0;
		updown = 1;
		led_off(LED_LEFT);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <led_off>
		led_off(LED_MID);
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <led_off>

		while(1){
			led_dim(LED_LEFT, blah);
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	0e 94 90 0b 	call	0x1720	; 0x1720 <led_dim>
			
			blah += updown;			
     4c4:	12 e0       	ldi	r17, 0x02	; 2
		sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]	
		blah = 1;
		blah16 = 0;
		updown = 1;
     4c6:	01 e0       	ldi	r16, 0x01	; 1
					STATE_Autolevel = AUTOLEVEL_DIODE;
					led_on(LED_MID);
				}
				else{
					//AUDIO mode
					STATE_Autolevel = AUTOLEVEL_AUDIO;
     4c8:	66 24       	eor	r6, r6
     4ca:	68 94       	set
     4cc:	61 f8       	bld	r6, 1
				//Now add some margin to the level for stability
				dac_out0(dac_read0()+600);
				STATE_Autolevel = AUTOLEVEL_DONE;
				break;
			case AUTOLEVEL_WAIT:
				STATE_Autolevel = AUTOLEVEL_WAIT2;
     4ce:	99 24       	eor	r9, r9
     4d0:	68 94       	set
     4d2:	92 f8       	bld	r9, 2
			case AUTOLEVEL_DIODE:
				//Determine background level
					adc_ch1_stats(1024);
				//Set background level
					dac_out0((adc_avg*5)/8 + 170); //background (x*0.625 = x*5/8)
				STATE_Autolevel = AUTOLEVEL_WAIT;
     4d4:	0f 2e       	mov	r0, r31
     4d6:	f3 e0       	ldi	r31, 0x03	; 3
     4d8:	8f 2e       	mov	r8, r31
     4da:	f0 2d       	mov	r31, r0
				//Decrease DAC until signal is saturated high		
				adc_avg = 0;						
				while(adc_avg < AUDIO_THRESHOLD_TOP){
					adc_ch1_stats(32);
					if(adc_avg <= AUDIO_THRESHOLD_TOP) {
						if(dac_read0() == 0) adc_avg = AUDIO_THRESHOLD_TOP; //safety condition -- can't reach loop exit condition, so lets just exit and hope for the best!
     4dc:	0f 2e       	mov	r0, r31
     4de:	fe ee       	ldi	r31, 0xEE	; 238
     4e0:	ef 2e       	mov	r14, r31
     4e2:	fe ee       	ldi	r31, 0xEE	; 238
     4e4:	ff 2e       	mov	r15, r31
     4e6:	f0 2d       	mov	r31, r0
						if(dac_read0() >= 100) {dac_out0(dac_read0()-100);}
						else {dac_out0(0);}	
					}						
				}				
				//Increase DAC until signal is saturated low
				adc_avg = 0xFFFF;
     4e8:	cc 24       	eor	r12, r12
     4ea:	ca 94       	dec	r12
     4ec:	dc 2c       	mov	r13, r12
				while(adc_avg > AUDIO_THRESHOLD_BOTTOM){
					adc_ch1_stats(32);
					if(adc_avg >= AUDIO_THRESHOLD_BOTTOM) {
						if(dac_read0() == 0x0FFF) adc_avg = AUDIO_THRESHOLD_BOTTOM; //safety condition -- can't reach loop exit condition, so lets just exit and hope for the best!
     4ee:	aa 24       	eor	r10, r10
     4f0:	bb 24       	eor	r11, r11
     4f2:	68 94       	set
     4f4:	b0 f8       	bld	r11, 0
						else {dac_out0(0x0FFF);}
					}
				}		
				//Now add some margin to the level for stability
				dac_out0(dac_read0()+600);
				STATE_Autolevel = AUTOLEVEL_DONE;
     4f6:	0f 2e       	mov	r0, r31
     4f8:	f5 e0       	ldi	r31, 0x05	; 5
     4fa:	7f 2e       	mov	r7, r31
     4fc:	f0 2d       	mov	r31, r0
			case AUTOLEVEL_IDLE:
			default:		
				break;
			}
					
			while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     4fe:	c0 e0       	ldi	r28, 0x00	; 0
     500:	d8 e0       	ldi	r29, 0x08	; 8
     502:	01 c0       	rjmp	.+2      	; 0x506 <main+0xdc>
		while(1){
			led_dim(LED_LEFT, blah);
			
			blah += updown;			
			if ((blah == 255) || (blah == 0)) {
				updown = -1 * updown;
     504:	01 95       	neg	r16
			}
			
			blah16++;
			
			service_pwm();
     506:	0e 94 aa 05 	call	0xb54	; 0xb54 <service_pwm>
			service_switches();
     50a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <service_switches>
			service_leds();
     50e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <service_leds>
			service_button();
     512:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <service_button>
			if (STATE_Button == BUTTON_PUSHED){
     516:	80 91 07 20 	lds	r24, 0x2007
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	91 f4       	brne	.+36     	; 0x542 <main+0x118>
				if (pwm_mode() == false){
     51e:	0e 94 ce 03 	call	0x79c	; 0x79c <pwm_mode>
     522:	88 23       	and	r24, r24
     524:	31 f4       	brne	.+12     	; 0x532 <main+0x108>
					//DIODE mode
					STATE_Autolevel = AUTOLEVEL_DIODE;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 04 20 	sts	0x2004, r24
					led_on(LED_MID);
     52c:	0e 94 a5 0b 	call	0x174a	; 0x174a <led_on>
     530:	08 c0       	rjmp	.+16     	; 0x542 <main+0x118>
				}
				else{
					//AUDIO mode
					STATE_Autolevel = AUTOLEVEL_AUDIO;
     532:	60 92 04 20 	sts	0x2004, r6
					dac_output0(ENABLE);
     536:	8a e2       	ldi	r24, 0x2A	; 42
     538:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>
					led_on(LED_MID);
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 a5 0b 	call	0x174a	; 0x174a <led_on>

			//PERFORM AUTO-LEVELING!
				//adc is 503uV resolution
				//dac is 806uV resolution
				//ergo ADC -> DAC values must be adjusted by: (x*0.625 = x*5/8)
			switch(STATE_Autolevel){
     542:	80 91 04 20 	lds	r24, 0x2004
     546:	83 30       	cpi	r24, 0x03	; 3
     548:	09 f4       	brne	.+2      	; 0x54c <main+0x122>
     54a:	99 c0       	rjmp	.+306    	; 0x67e <main+0x254>
     54c:	84 30       	cpi	r24, 0x04	; 4
     54e:	30 f4       	brcc	.+12     	; 0x55c <main+0x132>
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	59 f0       	breq	.+22     	; 0x56a <main+0x140>
     554:	82 30       	cpi	r24, 0x02	; 2
     556:	09 f0       	breq	.+2      	; 0x55a <main+0x130>
     558:	e4 c0       	rjmp	.+456    	; 0x722 <main+0x2f8>
     55a:	23 c0       	rjmp	.+70     	; 0x5a2 <main+0x178>
     55c:	84 30       	cpi	r24, 0x04	; 4
     55e:	09 f4       	brne	.+2      	; 0x562 <main+0x138>
     560:	91 c0       	rjmp	.+290    	; 0x684 <main+0x25a>
     562:	85 30       	cpi	r24, 0x05	; 5
     564:	09 f0       	breq	.+2      	; 0x568 <main+0x13e>
     566:	dd c0       	rjmp	.+442    	; 0x722 <main+0x2f8>
     568:	d7 c0       	rjmp	.+430    	; 0x718 <main+0x2ee>
			case AUTOLEVEL_DIODE:
				//Determine background level
					adc_ch1_stats(1024);
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	94 e0       	ldi	r25, 0x04	; 4
     56e:	0e 94 8c 01 	call	0x318	; 0x318 <adc_ch1_stats>
				//Set background level
					dac_out0((adc_avg*5)/8 + 170); //background (x*0.625 = x*5/8)
     572:	80 91 09 20 	lds	r24, 0x2009
     576:	90 91 0a 20 	lds	r25, 0x200A
     57a:	9c 01       	movw	r18, r24
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	22 0f       	add	r18, r18
     582:	33 1f       	adc	r19, r19
     584:	82 0f       	add	r24, r18
     586:	93 1f       	adc	r25, r19
     588:	96 95       	lsr	r25
     58a:	87 95       	ror	r24
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	96 95       	lsr	r25
     592:	87 95       	ror	r24
     594:	86 55       	subi	r24, 0x56	; 86
     596:	9f 4f       	sbci	r25, 0xFF	; 255
     598:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
				STATE_Autolevel = AUTOLEVEL_WAIT;
     59c:	80 92 04 20 	sts	0x2004, r8
				break;
     5a0:	c0 c0       	rjmp	.+384    	; 0x722 <main+0x2f8>
			case AUTOLEVEL_AUDIO:
				//We can't observe the signal directly so we need to hunt for the presumed DC level by...
				//Decrease DAC until signal is saturated high		
				adc_avg = 0;						
     5a2:	10 92 09 20 	sts	0x2009, r1
     5a6:	10 92 0a 20 	sts	0x200A, r1
				while(adc_avg < AUDIO_THRESHOLD_TOP){
     5aa:	24 c0       	rjmp	.+72     	; 0x5f4 <main+0x1ca>
					adc_ch1_stats(32);
     5ac:	80 e2       	ldi	r24, 0x20	; 32
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 8c 01 	call	0x318	; 0x318 <adc_ch1_stats>
					if(adc_avg <= AUDIO_THRESHOLD_TOP) {
     5b4:	80 91 09 20 	lds	r24, 0x2009
     5b8:	90 91 0a 20 	lds	r25, 0x200A
     5bc:	2e ee       	ldi	r18, 0xEE	; 238
     5be:	8f 3e       	cpi	r24, 0xEF	; 239
     5c0:	92 07       	cpc	r25, r18
     5c2:	c0 f4       	brcc	.+48     	; 0x5f4 <main+0x1ca>
						if(dac_read0() == 0) adc_avg = AUDIO_THRESHOLD_TOP; //safety condition -- can't reach loop exit condition, so lets just exit and hope for the best!
     5c4:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     5c8:	00 97       	sbiw	r24, 0x00	; 0
     5ca:	21 f4       	brne	.+8      	; 0x5d4 <main+0x1aa>
     5cc:	e0 92 09 20 	sts	0x2009, r14
     5d0:	f0 92 0a 20 	sts	0x200A, r15
						if(dac_read0() >= 100) {dac_out0(dac_read0()-100);}
     5d4:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     5d8:	84 36       	cpi	r24, 0x64	; 100
     5da:	91 05       	cpc	r25, r1
     5dc:	38 f0       	brcs	.+14     	; 0x5ec <main+0x1c2>
     5de:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     5e2:	84 56       	subi	r24, 0x64	; 100
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <main+0x1ca>
						else {dac_out0(0);}	
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
				break;
			case AUTOLEVEL_AUDIO:
				//We can't observe the signal directly so we need to hunt for the presumed DC level by...
				//Decrease DAC until signal is saturated high		
				adc_avg = 0;						
				while(adc_avg < AUDIO_THRESHOLD_TOP){
     5f4:	80 91 09 20 	lds	r24, 0x2009
     5f8:	90 91 0a 20 	lds	r25, 0x200A
     5fc:	2e ee       	ldi	r18, 0xEE	; 238
     5fe:	8e 3e       	cpi	r24, 0xEE	; 238
     600:	92 07       	cpc	r25, r18
     602:	a0 f2       	brcs	.-88     	; 0x5ac <main+0x182>
						if(dac_read0() >= 100) {dac_out0(dac_read0()-100);}
						else {dac_out0(0);}	
					}						
				}				
				//Increase DAC until signal is saturated low
				adc_avg = 0xFFFF;
     604:	c0 92 09 20 	sts	0x2009, r12
     608:	d0 92 0a 20 	sts	0x200A, r13
				while(adc_avg > AUDIO_THRESHOLD_BOTTOM){
     60c:	27 c0       	rjmp	.+78     	; 0x65c <main+0x232>
					adc_ch1_stats(32);
     60e:	80 e2       	ldi	r24, 0x20	; 32
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 8c 01 	call	0x318	; 0x318 <adc_ch1_stats>
					if(adc_avg >= AUDIO_THRESHOLD_BOTTOM) {
     616:	80 91 09 20 	lds	r24, 0x2009
     61a:	90 91 0a 20 	lds	r25, 0x200A
     61e:	8f 3f       	cpi	r24, 0xFF	; 255
     620:	91 05       	cpc	r25, r1
     622:	e1 f0       	breq	.+56     	; 0x65c <main+0x232>
     624:	d8 f0       	brcs	.+54     	; 0x65c <main+0x232>
						if(dac_read0() == 0x0FFF) adc_avg = AUDIO_THRESHOLD_BOTTOM; //safety condition -- can't reach loop exit condition, so lets just exit and hope for the best!
     626:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     62a:	2f e0       	ldi	r18, 0x0F	; 15
     62c:	8f 3f       	cpi	r24, 0xFF	; 255
     62e:	92 07       	cpc	r25, r18
     630:	21 f4       	brne	.+8      	; 0x63a <main+0x210>
     632:	a0 92 09 20 	sts	0x2009, r10
     636:	b0 92 0a 20 	sts	0x200A, r11
						if(dac_read0() < 0x0FFF) {dac_out0(dac_read0()+100);}
     63a:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     63e:	2f e0       	ldi	r18, 0x0F	; 15
     640:	8f 3f       	cpi	r24, 0xFF	; 255
     642:	92 07       	cpc	r25, r18
     644:	38 f4       	brcc	.+14     	; 0x654 <main+0x22a>
     646:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     64a:	8c 59       	subi	r24, 0x9C	; 156
     64c:	9f 4f       	sbci	r25, 0xFF	; 255
     64e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
     652:	04 c0       	rjmp	.+8      	; 0x65c <main+0x232>
						else {dac_out0(0x0FFF);}
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	9f e0       	ldi	r25, 0x0F	; 15
     658:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
						else {dac_out0(0);}	
					}						
				}				
				//Increase DAC until signal is saturated low
				adc_avg = 0xFFFF;
				while(adc_avg > AUDIO_THRESHOLD_BOTTOM){
     65c:	80 91 09 20 	lds	r24, 0x2009
     660:	90 91 0a 20 	lds	r25, 0x200A
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	92 07       	cpc	r25, r18
     66a:	88 f6       	brcc	.-94     	; 0x60e <main+0x1e4>
						if(dac_read0() < 0x0FFF) {dac_out0(dac_read0()+100);}
						else {dac_out0(0x0FFF);}
					}
				}		
				//Now add some margin to the level for stability
				dac_out0(dac_read0()+600);
     66c:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     670:	88 5a       	subi	r24, 0xA8	; 168
     672:	9d 4f       	sbci	r25, 0xFD	; 253
     674:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
				STATE_Autolevel = AUTOLEVEL_DONE;
     678:	70 92 04 20 	sts	0x2004, r7
				break;
     67c:	52 c0       	rjmp	.+164    	; 0x722 <main+0x2f8>
			case AUTOLEVEL_WAIT:
				STATE_Autolevel = AUTOLEVEL_WAIT2;
     67e:	90 92 04 20 	sts	0x2004, r9
				break;
     682:	4f c0       	rjmp	.+158    	; 0x722 <main+0x2f8>
			case AUTOLEVEL_WAIT2:
				//Measure resulting amplified level		
					adc_ch0_stats(1024);
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	94 e0       	ldi	r25, 0x04	; 4
     688:	0e 94 34 01 	call	0x268	; 0x268 <adc_ch0_stats>
				//Set threshold!
					dac_out1((adc_max*5)/8 + 512); //threshold
     68c:	80 91 0b 20 	lds	r24, 0x200B
     690:	90 91 0c 20 	lds	r25, 0x200C
     694:	9c 01       	movw	r18, r24
     696:	22 0f       	add	r18, r18
     698:	33 1f       	adc	r19, r19
     69a:	22 0f       	add	r18, r18
     69c:	33 1f       	adc	r19, r19
     69e:	82 0f       	add	r24, r18
     6a0:	93 1f       	adc	r25, r19
     6a2:	96 95       	lsr	r25
     6a4:	87 95       	ror	r24
     6a6:	96 95       	lsr	r25
     6a8:	87 95       	ror	r24
     6aa:	96 95       	lsr	r25
     6ac:	87 95       	ror	r24
     6ae:	80 50       	subi	r24, 0x00	; 0
     6b0:	9e 4f       	sbci	r25, 0xFE	; 254
     6b2:	0e 94 03 02 	call	0x406	; 0x406 <dac_out1>
					uart_send_byte(&uctrl, ' ');
     6b6:	80 ea       	ldi	r24, 0xA0	; 160
     6b8:	9a e0       	ldi	r25, 0x0A	; 10
     6ba:	60 e2       	ldi	r22, 0x20	; 32
     6bc:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
					uart_send_byte(&uctrl, '+');
     6c0:	80 ea       	ldi	r24, 0xA0	; 160
     6c2:	9a e0       	ldi	r25, 0x0A	; 10
     6c4:	6b e2       	ldi	r22, 0x2B	; 43
     6c6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
					uart_send_HEX16(&uctrl, adc_max*5/8);
     6ca:	60 91 0b 20 	lds	r22, 0x200B
     6ce:	70 91 0c 20 	lds	r23, 0x200C
     6d2:	cb 01       	movw	r24, r22
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	68 0f       	add	r22, r24
     6de:	79 1f       	adc	r23, r25
     6e0:	76 95       	lsr	r23
     6e2:	67 95       	ror	r22
     6e4:	76 95       	lsr	r23
     6e6:	67 95       	ror	r22
     6e8:	76 95       	lsr	r23
     6ea:	67 95       	ror	r22
     6ec:	80 ea       	ldi	r24, 0xA0	; 160
     6ee:	9a e0       	ldi	r25, 0x0A	; 10
     6f0:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_send_HEX16>
					uart_send_byte(&uctrl, '.');
     6f4:	80 ea       	ldi	r24, 0xA0	; 160
     6f6:	9a e0       	ldi	r25, 0x0A	; 10
     6f8:	6e e2       	ldi	r22, 0x2E	; 46
     6fa:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
					uart_send_HEX16(&uctrl, adc_max);
     6fe:	60 91 0b 20 	lds	r22, 0x200B
     702:	70 91 0c 20 	lds	r23, 0x200C
     706:	80 ea       	ldi	r24, 0xA0	; 160
     708:	9a e0       	ldi	r25, 0x0A	; 10
     70a:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_send_HEX16>
					uart_send_byte(&uctrl, ' ');
     70e:	80 ea       	ldi	r24, 0xA0	; 160
     710:	9a e0       	ldi	r25, 0x0A	; 10
     712:	60 e2       	ldi	r22, 0x20	; 32
     714:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
				//Done! -- just fall through					
			case AUTOLEVEL_DONE:
				led_off(LED_MID);
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <led_off>
				STATE_Autolevel = AUTOLEVEL_IDLE;
     71e:	10 92 04 20 	sts	0x2004, r1
			case AUTOLEVEL_IDLE:
			default:		
				break;
			}
					
			while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     722:	8c 85       	ldd	r24, Y+12	; 0x0c
     724:	80 ff       	sbrs	r24, 0
     726:	fd cf       	rjmp	.-6      	; 0x722 <main+0x2f8>
			TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	8c 87       	std	Y+12, r24	; 0x0c
		updown = 1;
		led_off(LED_LEFT);
		led_off(LED_MID);

		while(1){
			led_dim(LED_LEFT, blah);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	61 2f       	mov	r22, r17
     730:	0e 94 90 0b 	call	0x1720	; 0x1720 <led_dim>
			
			blah += updown;			
     734:	10 0f       	add	r17, r16
			if ((blah == 255) || (blah == 0)) {
     736:	81 2f       	mov	r24, r17
     738:	81 50       	subi	r24, 0x01	; 1
     73a:	8e 3f       	cpi	r24, 0xFE	; 254
     73c:	08 f0       	brcs	.+2      	; 0x740 <main+0x316>
     73e:	e2 ce       	rjmp	.-572    	; 0x504 <main+0xda>
     740:	e2 ce       	rjmp	.-572    	; 0x506 <main+0xdc>

00000742 <init_pwm>:
uint8_t STATE_Pwm_Timeout = TIMEOUT;

//Initialize the PWM module
void init_pwm(){
	//no init needed. We initialize when the mode is activated.
}
     742:	08 95       	ret

00000744 <pwm_enable>:

void pwm_enable(){
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
	//TIMER (PORTD.TC0)
		TCE0.CTRLA = B8(00000101); //Timer Clock source is 32MHz/64; ~130ms Range @ 2uS resolution
     748:	e0 e0       	ldi	r30, 0x00	; 0
     74a:	fa e0       	ldi	r31, 0x0A	; 10
     74c:	85 e0       	ldi	r24, 0x05	; 5
     74e:	80 83       	st	Z, r24
		TCE0.CTRLB = 0x00; //Turn off output pins (for both input capture and waveform generation)
     750:	11 82       	std	Z+1, r1	; 0x01
		TCE0.CTRLC = 0x00; //Only for the compare output unit
     752:	12 82       	std	Z+2, r1	; 0x02
		TCE0.CTRLD = B8(00000000); //Disable Event Unit
     754:	13 82       	std	Z+3, r1	; 0x03
		TCE0.CTRLE = 0x00; //Leave the counter in 16 (rather than 8) bit mode
     756:	14 82       	std	Z+4, r1	; 0x04

	//DIGITAL-TO-ANALOG CONVERTER (DAC)
		//PORTB.DAC0 -- Vbackground; value set by calibration routine;
		dac_output0(ENABLE);
     758:	8a e2       	ldi	r24, 0x2A	; 42
     75a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>
		dac_out1(2000); //about mid scale
     75e:	80 ed       	ldi	r24, 0xD0	; 208
     760:	97 e0       	ldi	r25, 0x07	; 7
     762:	0e 94 03 02 	call	0x406	; 0x406 <dac_out1>
		
	//ANALOG COMPARATOR
		ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5 (DAC1); 
     766:	c0 e8       	ldi	r28, 0x80	; 128
     768:	d3 e0       	ldi	r29, 0x03	; 3
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	8a 83       	std	Y+2, r24	; 0x02
		//ACA.CTRLB = 20; //VCC Scaler = VCC/2 = 1.65V
		ac_output(DISABLE); //Turn off PA7 output pin (we'll use it directly to control the external peripheral)
     76e:	89 e2       	ldi	r24, 0x29	; 41
     770:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ac_output>
		ACA.AC0CTRL = B8(00111101); //enable AC0; 50mV hysterysis; high priority interrupt on edge toggle; high-speed mode
     774:	8d e3       	ldi	r24, 0x3D	; 61
     776:	88 83       	st	Y, r24
		PORTA.OUTCLR = B8(10000000); //PA7 output low
     778:	e0 e0       	ldi	r30, 0x00	; 0
     77a:	f6 e0       	ldi	r31, 0x06	; 6
     77c:	80 e8       	ldi	r24, 0x80	; 128
     77e:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRSET = B8(10000000); //Set PA7 as output (should be anyway)
     780:	81 83       	std	Z+1, r24	; 0x01

	//BUTTON
		STATE_Autolevel = AUTOLEVEL_IDLE;
     782:	10 92 04 20 	sts	0x2004, r1
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <pwm_disable>:

void pwm_disable(){
	//TIMER (PORTD.TC0)
		TCE0.CTRLA = 0x00; //Disable Timer
     78c:	10 92 00 0a 	sts	0x0A00, r1

	//DIGITAL-TO-ANALOG CONVERTER (DAC)
		//PORTB.DAC0 -- Vbackground; Enable to allow DAC operation
		dac_output0(DISABLE);
     790:	89 e2       	ldi	r24, 0x29	; 41
     792:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>

	//ANALOG COMPARATOR
		init_ac();
     796:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_ac>
}
     79a:	08 95       	ret

0000079c <pwm_mode>:

//Returns 'true' if the user configuration switch is set to Audio/PWM mode
boolean pwm_mode(){
	return sw_on(SW1);
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sw_on>
}
     7a2:	08 95       	ret

000007a4 <pwm_polarity>:
		pwm_decode(width);
	}
}

void pwm_polarity(uint8_t polarity){
	STATE_Pwm_Polarity = polarity;
     7a4:	80 93 02 20 	sts	0x2002, r24
}
     7a8:	08 95       	ret

000007aa <pwm_timer_reset>:
//#############################################################
//## TIMER CAPTURE FUNCTIONS
//#############################################################
void pwm_timer_reset(void){
	//Reset the timer effective immediately!
	TCE0.CNTL = 0x00;
     7aa:	e0 e0       	ldi	r30, 0x00	; 0
     7ac:	fa e0       	ldi	r31, 0x0A	; 10
     7ae:	10 a2       	lds	r17, 0x90
	TCE0.CNTH = 0x00;	
     7b0:	11 a2       	lds	r17, 0x91
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	84 87       	std	Z+12, r24	; 0x0c
}
     7b6:	08 95       	ret

000007b8 <edge_start>:
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}

void inline edge_start(){
	pwm_timer_reset();
     7b8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <pwm_timer_reset>
}
     7bc:	08 95       	ret

000007be <between>:
	TCE0.CNTH = 0x00;	
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
}

boolean between(uint16_t var, uint16_t low, uint16_t high){
     7be:	9c 01       	movw	r18, r24
	if ((var > low) && (var < high)) return true;
     7c0:	68 17       	cp	r22, r24
     7c2:	79 07       	cpc	r23, r25
     7c4:	30 f4       	brcc	.+12     	; 0x7d2 <between+0x14>
	TCE0.CNTH = 0x00;	
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
}

boolean between(uint16_t var, uint16_t low, uint16_t high){
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	24 17       	cp	r18, r20
     7ca:	35 07       	cpc	r19, r21
     7cc:	18 f0       	brcs	.+6      	; 0x7d4 <between+0x16>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	08 95       	ret
	if ((var > low) && (var < high)) return true;
	else return false;
     7d2:	80 e0       	ldi	r24, 0x00	; 0
}
     7d4:	08 95       	ret

000007d6 <pwm_out_high>:
		pwm_state('D');
	}
}

void pwm_out_high(void){
	STATE_Pwm = PWM_OUTPUT_HIGH; //A = Turn On Constantly
     7d6:	8f e4       	ldi	r24, 0x4F	; 79
     7d8:	80 93 03 20 	sts	0x2003, r24
	uart_enqueue(' ');
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('<');
     7e2:	8c e3       	ldi	r24, 0x3C	; 60
     7e4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('-');
     7e8:	8d e2       	ldi	r24, 0x2D	; 45
     7ea:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('O');
     7ee:	8f e4       	ldi	r24, 0x4F	; 79
     7f0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('N');
     7f4:	8e e4       	ldi	r24, 0x4E	; 78
     7f6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
}
     7fa:	08 95       	ret

000007fc <pwm_out_low>:
void pwm_out_low(void){
	STATE_Pwm = PWM_OUTPUT_LOW; //B = Turn Off Constantly
     7fc:	8e e4       	ldi	r24, 0x4E	; 78
     7fe:	80 93 03 20 	sts	0x2003, r24
	uart_enqueue(' ');
     802:	80 e2       	ldi	r24, 0x20	; 32
     804:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('<');
     808:	8c e3       	ldi	r24, 0x3C	; 60
     80a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('-');
     80e:	8d e2       	ldi	r24, 0x2D	; 45
     810:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('O');
     814:	8f e4       	ldi	r24, 0x4F	; 79
     816:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('F');
     81a:	86 e4       	ldi	r24, 0x46	; 70
     81c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('F');
     820:	86 e4       	ldi	r24, 0x46	; 70
     822:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
}
     826:	08 95       	ret

00000828 <pwm_pulse>:

//Code to initiate an output pulse. Output pulses are only initiated if there is not a current pulse in progress
void pwm_pulse(void){	
	if (STATE_Pwm != PWM_OUTPUT_PULSE){
     828:	80 91 03 20 	lds	r24, 0x2003
     82c:	80 35       	cpi	r24, 0x50	; 80
     82e:	31 f0       	breq	.+12     	; 0x83c <pwm_pulse+0x14>
		STATE_Pwm = PWM_OUTPUT_PULSE; //Update state
     830:	80 e5       	ldi	r24, 0x50	; 80
     832:	80 93 03 20 	sts	0x2003, r24
		STATE_Pwm_Counter = PWM_PULSE_DURATION; //Load the counter
     836:	8a e0       	ldi	r24, 0x0A	; 10
     838:	80 93 05 20 	sts	0x2005, r24
	}	
	uart_enqueue(' ');
     83c:	80 e2       	ldi	r24, 0x20	; 32
     83e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('<');
     842:	8c e3       	ldi	r24, 0x3C	; 60
     844:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('-');
     848:	8d e2       	ldi	r24, 0x2D	; 45
     84a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('P');
     84e:	80 e5       	ldi	r24, 0x50	; 80
     850:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('U');
     854:	85 e5       	ldi	r24, 0x55	; 85
     856:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('L');
     85a:	8c e4       	ldi	r24, 0x4C	; 76
     85c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('S');
     860:	83 e5       	ldi	r24, 0x53	; 83
     862:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('E');
     866:	85 e4       	ldi	r24, 0x45	; 69
     868:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
}
     86c:	08 95       	ret

0000086e <pwm_reserved>:

void pwm_reserved(void){
	uart_enqueue(' ');
     86e:	80 e2       	ldi	r24, 0x20	; 32
     870:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('<');
     874:	8c e3       	ldi	r24, 0x3C	; 60
     876:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('-');
     87a:	8d e2       	ldi	r24, 0x2D	; 45
     87c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('W');
     880:	87 e5       	ldi	r24, 0x57	; 87
     882:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('T');
     886:	84 e5       	ldi	r24, 0x54	; 84
     888:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('F');
     88c:	86 e4       	ldi	r24, 0x46	; 70
     88e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enqueue('!');
     892:	81 e2       	ldi	r24, 0x21	; 33
     894:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
}
     898:	08 95       	ret

0000089a <pwm_change_state>:

void pwm_change_state(uint8_t new_state){
	STATE_Pwm_Decode = new_state;
     89a:	80 93 01 20 	sts	0x2001, r24
	STATE_Pwm_Timeout = TIMEOUT;		
     89e:	82 e3       	ldi	r24, 0x32	; 50
     8a0:	80 93 00 20 	sts	0x2000, r24
}
     8a4:	08 95       	ret

000008a6 <pwm_state>:

//State machine to decode more advanced command format
void pwm_state(uint8_t next_code){
	switch (STATE_Pwm_Decode){
     8a6:	90 91 01 20 	lds	r25, 0x2001
     8aa:	95 38       	cpi	r25, 0x85	; 133
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <pwm_state+0xa>
     8ae:	42 c0       	rjmp	.+132    	; 0x934 <pwm_state+0x8e>
     8b0:	96 38       	cpi	r25, 0x86	; 134
     8b2:	40 f4       	brcc	.+16     	; 0x8c4 <pwm_state+0x1e>
     8b4:	93 38       	cpi	r25, 0x83	; 131
     8b6:	d1 f0       	breq	.+52     	; 0x8ec <pwm_state+0x46>
     8b8:	94 38       	cpi	r25, 0x84	; 132
     8ba:	58 f5       	brcc	.+86     	; 0x912 <pwm_state+0x6c>
     8bc:	92 38       	cpi	r25, 0x82	; 130
     8be:	09 f0       	breq	.+2      	; 0x8c2 <pwm_state+0x1c>
     8c0:	5a c0       	rjmp	.+180    	; 0x976 <pwm_state+0xd0>
     8c2:	0d c0       	rjmp	.+26     	; 0x8de <pwm_state+0x38>
     8c4:	97 38       	cpi	r25, 0x87	; 135
     8c6:	09 f4       	brne	.+2      	; 0x8ca <pwm_state+0x24>
     8c8:	4a c0       	rjmp	.+148    	; 0x95e <pwm_state+0xb8>
     8ca:	97 38       	cpi	r25, 0x87	; 135
     8cc:	08 f4       	brcc	.+2      	; 0x8d0 <pwm_state+0x2a>
     8ce:	43 c0       	rjmp	.+134    	; 0x956 <pwm_state+0xb0>
     8d0:	98 38       	cpi	r25, 0x88	; 136
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <pwm_state+0x30>
     8d4:	48 c0       	rjmp	.+144    	; 0x966 <pwm_state+0xc0>
     8d6:	99 38       	cpi	r25, 0x89	; 137
     8d8:	09 f0       	breq	.+2      	; 0x8dc <pwm_state+0x36>
     8da:	4d c0       	rjmp	.+154    	; 0x976 <pwm_state+0xd0>
     8dc:	48 c0       	rjmp	.+144    	; 0x96e <pwm_state+0xc8>
		case LOOK_FOR_START:
			if (next_code == 'A') pwm_change_state(SAW_A);
     8de:	81 34       	cpi	r24, 0x41	; 65
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <pwm_state+0x3e>
     8e2:	4c c0       	rjmp	.+152    	; 0x97c <pwm_state+0xd6>
     8e4:	83 e8       	ldi	r24, 0x83	; 131
     8e6:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     8ea:	08 95       	ret
			break;
		case SAW_A:
			switch (next_code){
     8ec:	82 34       	cpi	r24, 0x42	; 66
     8ee:	29 f0       	breq	.+10     	; 0x8fa <pwm_state+0x54>
     8f0:	83 34       	cpi	r24, 0x43	; 67
     8f2:	39 f0       	breq	.+14     	; 0x902 <pwm_state+0x5c>
     8f4:	81 34       	cpi	r24, 0x41	; 65
     8f6:	49 f4       	brne	.+18     	; 0x90a <pwm_state+0x64>
     8f8:	08 95       	ret
				case 'A':
				break;
				case 'B':
				pwm_change_state(SAW_AB); break;
     8fa:	84 e8       	ldi	r24, 0x84	; 132
     8fc:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     900:	08 95       	ret
				case 'C':
				pwm_change_state(SAW_AC); break;
     902:	85 e8       	ldi	r24, 0x85	; 133
     904:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     908:	08 95       	ret
				default:
				pwm_change_state(LOOK_FOR_START);
     90a:	82 e8       	ldi	r24, 0x82	; 130
     90c:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     910:	08 95       	ret
			}		
			break;	
		case SAW_AB:
			switch (next_code){
     912:	82 34       	cpi	r24, 0x42	; 66
     914:	19 f0       	breq	.+6      	; 0x91c <pwm_state+0x76>
     916:	83 34       	cpi	r24, 0x43	; 67
     918:	49 f4       	brne	.+18     	; 0x92c <pwm_state+0x86>
     91a:	04 c0       	rjmp	.+8      	; 0x924 <pwm_state+0x7e>
				case 'B':
					pwm_change_state(SAW_ABB); break;
     91c:	86 e8       	ldi	r24, 0x86	; 134
     91e:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     922:	08 95       	ret
				case 'C':
					pwm_change_state(SAW_ABC); break;
     924:	87 e8       	ldi	r24, 0x87	; 135
     926:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     92a:	08 95       	ret
				default:
					pwm_change_state(LOOK_FOR_START);
     92c:	82 e8       	ldi	r24, 0x82	; 130
     92e:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     932:	08 95       	ret
			}
			break;
		case SAW_AC:
			switch (next_code){
     934:	82 34       	cpi	r24, 0x42	; 66
     936:	19 f0       	breq	.+6      	; 0x93e <pwm_state+0x98>
     938:	83 34       	cpi	r24, 0x43	; 67
     93a:	49 f4       	brne	.+18     	; 0x94e <pwm_state+0xa8>
     93c:	04 c0       	rjmp	.+8      	; 0x946 <pwm_state+0xa0>
				case 'B':
					pwm_change_state(SAW_ACB); break;
     93e:	88 e8       	ldi	r24, 0x88	; 136
     940:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     944:	08 95       	ret
				case 'C':
					pwm_change_state(SAW_ACC); break;
     946:	89 e8       	ldi	r24, 0x89	; 137
     948:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     94c:	08 95       	ret
				default:
					pwm_change_state(LOOK_FOR_START);
     94e:	82 e8       	ldi	r24, 0x82	; 130
     950:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_change_state>
     954:	08 95       	ret
			}
			break;
		case SAW_ABB:
			if (STATE_Pwm_Decode == 'D') pwm_out_high();
			STATE_Pwm_Decode = LOOK_FOR_START;				
     956:	82 e8       	ldi	r24, 0x82	; 130
     958:	80 93 01 20 	sts	0x2001, r24
			break;
     95c:	08 95       	ret
		case SAW_ABC:
			if (STATE_Pwm_Decode == 'D') pwm_out_low();
			STATE_Pwm_Decode = LOOK_FOR_START;
     95e:	82 e8       	ldi	r24, 0x82	; 130
     960:	80 93 01 20 	sts	0x2001, r24
			break;		
     964:	08 95       	ret
		case SAW_ACB:
			if (STATE_Pwm_Decode == 'D') pwm_pulse();
			STATE_Pwm_Decode = LOOK_FOR_START;
     966:	82 e8       	ldi	r24, 0x82	; 130
     968:	80 93 01 20 	sts	0x2001, r24
			break;
     96c:	08 95       	ret
		case SAW_ACC:
			if (STATE_Pwm_Decode == 'D') pwm_reserved();
			STATE_Pwm_Decode = LOOK_FOR_START;
     96e:	82 e8       	ldi	r24, 0x82	; 130
     970:	80 93 01 20 	sts	0x2001, r24
			break;
     974:	08 95       	ret
		default:
			STATE_Pwm_Decode = LOOK_FOR_START;
     976:	82 e8       	ldi	r24, 0x82	; 130
     978:	80 93 01 20 	sts	0x2001, r24
     97c:	08 95       	ret

0000097e <pwm_decode>:
//Converts Pulse Width's into State Machine Changes
	//0x2000 = As.wav
	//0x4000 = Bs.wav
	//0x7000 = Cs.wav
	//0x9000 = Ds.wav
void pwm_decode(uint16_t width){
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
	
	uart_send_byte(&udata,'-');
     984:	80 eb       	ldi	r24, 0xB0	; 176
     986:	99 e0       	ldi	r25, 0x09	; 9
     988:	6d e2       	ldi	r22, 0x2D	; 45
     98a:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
	uart_send_byte(&udata,'-');
     98e:	80 eb       	ldi	r24, 0xB0	; 176
     990:	99 e0       	ldi	r25, 0x09	; 9
     992:	6d e2       	ldi	r22, 0x2D	; 45
     994:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
	uart_send_byte(&udata,'-');
     998:	80 eb       	ldi	r24, 0xB0	; 176
     99a:	99 e0       	ldi	r25, 0x09	; 9
     99c:	6d e2       	ldi	r22, 0x2D	; 45
     99e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
	uart_send_HEX16(&udata, width);
     9a2:	80 eb       	ldi	r24, 0xB0	; 176
     9a4:	99 e0       	ldi	r25, 0x09	; 9
     9a6:	be 01       	movw	r22, r28
     9a8:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_send_HEX16>
	uart_send_byte(&udata,'-');
     9ac:	80 eb       	ldi	r24, 0xB0	; 176
     9ae:	99 e0       	ldi	r25, 0x09	; 9
     9b0:	6d e2       	ldi	r22, 0x2D	; 45
     9b2:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
	uart_send_byte(&udata, 13);
     9b6:	80 eb       	ldi	r24, 0xB0	; 176
     9b8:	99 e0       	ldi	r25, 0x09	; 9
     9ba:	6d e0       	ldi	r22, 0x0D	; 13
     9bc:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
	
	if (between(width,0x1000,0x2000) == true){
     9c0:	ce 01       	movw	r24, r28
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	70 e1       	ldi	r23, 0x10	; 16
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e2       	ldi	r21, 0x20	; 32
     9ca:	0e 94 df 03 	call	0x7be	; 0x7be <between>
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	19 f4       	brne	.+6      	; 0x9d8 <pwm_decode+0x5a>
		//Found A code!
		pwm_state('A');		
     9d2:	81 e4       	ldi	r24, 0x41	; 65
     9d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <pwm_state>
	}
	if (between(width,0x2000,0x3000) == true){
     9d8:	ce 01       	movw	r24, r28
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e2       	ldi	r23, 0x20	; 32
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	50 e3       	ldi	r21, 0x30	; 48
     9e2:	0e 94 df 03 	call	0x7be	; 0x7be <between>
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	19 f4       	brne	.+6      	; 0x9f0 <pwm_decode+0x72>
		//Found B code!
		pwm_state('B');
     9ea:	82 e4       	ldi	r24, 0x42	; 66
     9ec:	0e 94 53 04 	call	0x8a6	; 0x8a6 <pwm_state>
	}
	if (between(width,0x4000,0x5000) == true){
     9f0:	ce 01       	movw	r24, r28
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	70 e4       	ldi	r23, 0x40	; 64
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	50 e5       	ldi	r21, 0x50	; 80
     9fa:	0e 94 df 03 	call	0x7be	; 0x7be <between>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	19 f4       	brne	.+6      	; 0xa08 <pwm_decode+0x8a>
		//Found C code!
		pwm_state('C');
     a02:	83 e4       	ldi	r24, 0x43	; 67
     a04:	0e 94 53 04 	call	0x8a6	; 0x8a6 <pwm_state>
	}
	if (between(width,0x7000,0x8000) == true){
     a08:	ce 01       	movw	r24, r28
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e7       	ldi	r23, 0x70	; 112
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e8       	ldi	r21, 0x80	; 128
     a12:	0e 94 df 03 	call	0x7be	; 0x7be <between>
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	19 f4       	brne	.+6      	; 0xa20 <pwm_decode+0xa2>
		//Found D code!
		pwm_state('D');
     a1a:	84 e4       	ldi	r24, 0x44	; 68
     a1c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <pwm_state>
	}
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <edge_stop>:

void inline edge_start(){
	pwm_timer_reset();
}

void inline edge_stop(){
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
	uint16_t width;
	width = TCE0.CNT;
     a2a:	e0 e0       	ldi	r30, 0x00	; 0
     a2c:	fa e0       	ldi	r31, 0x0A	; 10
     a2e:	c0 a1       	lds	r28, 0x40
     a30:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     a32:	84 85       	ldd	r24, Z+12	; 0x0c
     a34:	80 fd       	sbrc	r24, 0
     a36:	12 c0       	rjmp	.+36     	; 0xa5c <edge_stop+0x36>
		uart_enqueue(13);
     a38:	8d e0       	ldi	r24, 0x0D	; 13
     a3a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue(10);
     a3e:	8a e0       	ldi	r24, 0x0A	; 10
     a40:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('-');
     a44:	8d e2       	ldi	r24, 0x2D	; 45
     a46:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('-');
     a4a:	8d e2       	ldi	r24, 0x2D	; 45
     a4c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enq_HEX16(width);
     a50:	ce 01       	movw	r24, r28
     a52:	0e 94 ac 09 	call	0x1358	; 0x1358 <uart_enq_HEX16>
		pwm_decode(width);
     a56:	ce 01       	movw	r24, r28
     a58:	0e 94 bf 04 	call	0x97e	; 0x97e <pwm_decode>
	}
}
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <__vector_68>:
boolean pwm_mode(){
	return sw_on(SW1);
}

//ANALOG COMPARATOR (AC0) OUTPUT TOGGLE INTERRUPT
SIGNAL(ACA_AC0_vect){
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	5f 93       	push	r21
     a74:	6f 93       	push	r22
     a76:	7f 93       	push	r23
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	af 93       	push	r26
     a7e:	bf 93       	push	r27
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31
	//led_toggle(LED_MID);
	if ((ACA.STATUS & B8(00010000)) > 0){
     a88:	e0 e8       	ldi	r30, 0x80	; 128
     a8a:	f3 e0       	ldi	r31, 0x03	; 3
     a8c:	87 81       	ldd	r24, Z+7	; 0x07
     a8e:	84 ff       	sbrs	r24, 4
     a90:	28 c0       	rjmp	.+80     	; 0xae2 <__vector_68+0x80>
		led_on(LED_MID);
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	0e 94 a5 0b 	call	0x174a	; 0x174a <led_on>
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
     a98:	80 91 02 20 	lds	r24, 0x2002
     a9c:	87 35       	cpi	r24, 0x57	; 87
     a9e:	11 f4       	brne	.+4      	; 0xaa4 <__vector_68+0x42>
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}

void inline edge_start(){
	pwm_timer_reset();
     aa0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <pwm_timer_reset>
	//led_toggle(LED_MID);
	if ((ACA.STATUS & B8(00010000)) > 0){
		led_on(LED_MID);
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_stop();
     aa4:	80 91 02 20 	lds	r24, 0x2002
     aa8:	88 35       	cpi	r24, 0x58	; 88
     aaa:	09 f0       	breq	.+2      	; 0xaae <__vector_68+0x4c>
     aac:	40 c0       	rjmp	.+128    	; 0xb2e <__vector_68+0xcc>
	pwm_timer_reset();
}

void inline edge_stop(){
	uint16_t width;
	width = TCE0.CNT;
     aae:	e0 e0       	ldi	r30, 0x00	; 0
     ab0:	fa e0       	ldi	r31, 0x0A	; 10
     ab2:	c0 a1       	lds	r28, 0x40
     ab4:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     ab6:	84 85       	ldd	r24, Z+12	; 0x0c
     ab8:	80 fd       	sbrc	r24, 0
     aba:	39 c0       	rjmp	.+114    	; 0xb2e <__vector_68+0xcc>
		uart_enqueue(13);
     abc:	8d e0       	ldi	r24, 0x0D	; 13
     abe:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue(10);
     ac2:	8a e0       	ldi	r24, 0x0A	; 10
     ac4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('-');
     ac8:	8d e2       	ldi	r24, 0x2D	; 45
     aca:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('-');
     ace:	8d e2       	ldi	r24, 0x2D	; 45
     ad0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enq_HEX16(width);
     ad4:	ce 01       	movw	r24, r28
     ad6:	0e 94 ac 09 	call	0x1358	; 0x1358 <uart_enq_HEX16>
		pwm_decode(width);
     ada:	ce 01       	movw	r24, r28
     adc:	0e 94 bf 04 	call	0x97e	; 0x97e <pwm_decode>
     ae0:	26 c0       	rjmp	.+76     	; 0xb2e <__vector_68+0xcc>
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_stop();
	}
	else {
		led_off(LED_MID);
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <led_off>
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
     ae8:	80 91 02 20 	lds	r24, 0x2002
     aec:	87 35       	cpi	r24, 0x57	; 87
     aee:	c9 f4       	brne	.+50     	; 0xb22 <__vector_68+0xc0>
	pwm_timer_reset();
}

void inline edge_stop(){
	uint16_t width;
	width = TCE0.CNT;
     af0:	e0 e0       	ldi	r30, 0x00	; 0
     af2:	fa e0       	ldi	r31, 0x0A	; 10
     af4:	c0 a1       	lds	r28, 0x40
     af6:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     af8:	84 85       	ldd	r24, Z+12	; 0x0c
     afa:	80 fd       	sbrc	r24, 0
     afc:	12 c0       	rjmp	.+36     	; 0xb22 <__vector_68+0xc0>
		uart_enqueue(13);
     afe:	8d e0       	ldi	r24, 0x0D	; 13
     b00:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue(10);
     b04:	8a e0       	ldi	r24, 0x0A	; 10
     b06:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('-');
     b0a:	8d e2       	ldi	r24, 0x2D	; 45
     b0c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('-');
     b10:	8d e2       	ldi	r24, 0x2D	; 45
     b12:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enq_HEX16(width);
     b16:	ce 01       	movw	r24, r28
     b18:	0e 94 ac 09 	call	0x1358	; 0x1358 <uart_enq_HEX16>
		pwm_decode(width);
     b1c:	ce 01       	movw	r24, r28
     b1e:	0e 94 bf 04 	call	0x97e	; 0x97e <pwm_decode>
	}
	else {
		led_off(LED_MID);
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
     b22:	80 91 02 20 	lds	r24, 0x2002
     b26:	88 35       	cpi	r24, 0x58	; 88
     b28:	11 f4       	brne	.+4      	; 0xb2e <__vector_68+0xcc>
	}
}

void inline edge_start(){
	pwm_timer_reset();
     b2a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <pwm_timer_reset>
		led_off(LED_MID);
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}
     b2e:	ff 91       	pop	r31
     b30:	ef 91       	pop	r30
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	bf 91       	pop	r27
     b38:	af 91       	pop	r26
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	7f 91       	pop	r23
     b40:	6f 91       	pop	r22
     b42:	5f 91       	pop	r21
     b44:	4f 91       	pop	r20
     b46:	3f 91       	pop	r19
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <service_pwm>:
//Mainline Loop PWM Service Routine -- use to manage output pulse
//...and trigger states
//---must run only once per 2ms looptime
void service_pwm(void){
	//Process Decoding Timeout
	if (STATE_Pwm_Timeout > 0) STATE_Pwm_Timeout--;
     b54:	80 91 00 20 	lds	r24, 0x2000
     b58:	88 23       	and	r24, r24
     b5a:	29 f0       	breq	.+10     	; 0xb66 <service_pwm+0x12>
     b5c:	81 50       	subi	r24, 0x01	; 1
     b5e:	80 93 00 20 	sts	0x2000, r24
	if (STATE_Pwm_Timeout == 0) STATE_Pwm_Decode = LOOK_FOR_START;
     b62:	88 23       	and	r24, r24
     b64:	19 f4       	brne	.+6      	; 0xb6c <service_pwm+0x18>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	80 93 01 20 	sts	0x2001, r24
	
	//Process component pulse durations
	switch(STATE_Pwm){
     b6c:	80 91 03 20 	lds	r24, 0x2003
     b70:	8f 34       	cpi	r24, 0x4F	; 79
     b72:	19 f0       	breq	.+6      	; 0xb7a <service_pwm+0x26>
     b74:	80 35       	cpi	r24, 0x50	; 80
     b76:	d1 f4       	brne	.+52     	; 0xbac <service_pwm+0x58>
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <service_pwm+0x30>
	case PWM_OUTPUT_HIGH:
		PORTA.OUTSET = B8(10000000); //PA7 output high
     b7a:	80 e8       	ldi	r24, 0x80	; 128
     b7c:	e0 e0       	ldi	r30, 0x00	; 0
     b7e:	f6 e0       	ldi	r31, 0x06	; 6
     b80:	85 83       	std	Z+5, r24	; 0x05
		break;
     b82:	08 95       	ret
	case PWM_OUTPUT_PULSE:
		if (STATE_Pwm_Counter == 0)	{
     b84:	80 91 05 20 	lds	r24, 0x2005
     b88:	88 23       	and	r24, r24
     b8a:	41 f4       	brne	.+16     	; 0xb9c <service_pwm+0x48>
			//Done with pulse!
			PORTA.OUTCLR = B8(10000000); //PA7 output low
     b8c:	80 e8       	ldi	r24, 0x80	; 128
     b8e:	e0 e0       	ldi	r30, 0x00	; 0
     b90:	f6 e0       	ldi	r31, 0x06	; 6
     b92:	86 83       	std	Z+6, r24	; 0x06
			STATE_Pwm = PWM_OUTPUT_LOW;	//Update State (Done with pulse)
     b94:	8e e4       	ldi	r24, 0x4E	; 78
     b96:	80 93 03 20 	sts	0x2003, r24
     b9a:	08 95       	ret
		}
		else {
			STATE_Pwm_Counter--; //Decrement Counter
     b9c:	81 50       	subi	r24, 0x01	; 1
     b9e:	80 93 05 20 	sts	0x2005, r24
			PORTA.OUTSET = B8(10000000); //PA7 output high
     ba2:	80 e8       	ldi	r24, 0x80	; 128
     ba4:	e0 e0       	ldi	r30, 0x00	; 0
     ba6:	f6 e0       	ldi	r31, 0x06	; 6
     ba8:	85 83       	std	Z+5, r24	; 0x05
     baa:	08 95       	ret
		}
		break;
	case PWM_OUTPUT_LOW:
	default:
		PORTA.OUTCLR = B8(10000000); //PA7 output low
     bac:	80 e8       	ldi	r24, 0x80	; 128
     bae:	e0 e0       	ldi	r30, 0x00	; 0
     bb0:	f6 e0       	ldi	r31, 0x06	; 6
     bb2:	86 83       	std	Z+6, r24	; 0x06
     bb4:	08 95       	ret

00000bb6 <init_uart>:
//= INITIALIZATION ROUTINES
//==================================

//Select which uart to initialize from the list of defined constants in the io.h
//Pass in Baud rate from a list of defined constants
void init_uart(USART_t* which, uint8_t baud_rate){
     bb6:	fc 01       	movw	r30, r24
	//Config the PORT
		if (&(*which) == &USARTC0){
     bb8:	88 e0       	ldi	r24, 0x08	; 8
     bba:	e0 3a       	cpi	r30, 0xA0	; 160
     bbc:	f8 07       	cpc	r31, r24
     bbe:	51 f4       	brne	.+20     	; 0xbd4 <init_uart+0x1e>
			PORTC.DIRSET = B8(00001000); //TX pin as output
     bc0:	a0 e4       	ldi	r26, 0x40	; 64
     bc2:	b6 e0       	ldi	r27, 0x06	; 6
     bc4:	88 e0       	ldi	r24, 0x08	; 8
     bc6:	11 96       	adiw	r26, 0x01	; 1
     bc8:	8c 93       	st	X, r24
     bca:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(00001000); //TX initial output value is high
     bcc:	15 96       	adiw	r26, 0x05	; 5
     bce:	8c 93       	st	X, r24
     bd0:	15 97       	sbiw	r26, 0x05	; 5
     bd2:	37 c0       	rjmp	.+110    	; 0xc42 <init_uart+0x8c>
		}
		else if (&(*which) == &USARTC1) {
     bd4:	88 e0       	ldi	r24, 0x08	; 8
     bd6:	e0 3b       	cpi	r30, 0xB0	; 176
     bd8:	f8 07       	cpc	r31, r24
     bda:	51 f4       	brne	.+20     	; 0xbf0 <init_uart+0x3a>
			PORTC.DIRSET = B8(10000000); //TX pin as output
     bdc:	a0 e4       	ldi	r26, 0x40	; 64
     bde:	b6 e0       	ldi	r27, 0x06	; 6
     be0:	80 e8       	ldi	r24, 0x80	; 128
     be2:	11 96       	adiw	r26, 0x01	; 1
     be4:	8c 93       	st	X, r24
     be6:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(10000000); //TX initial output value is high
     be8:	15 96       	adiw	r26, 0x05	; 5
     bea:	8c 93       	st	X, r24
     bec:	15 97       	sbiw	r26, 0x05	; 5
     bee:	29 c0       	rjmp	.+82     	; 0xc42 <init_uart+0x8c>
		}
		else if (&(*which) == &USARTD0) {
     bf0:	89 e0       	ldi	r24, 0x09	; 9
     bf2:	e0 3a       	cpi	r30, 0xA0	; 160
     bf4:	f8 07       	cpc	r31, r24
     bf6:	51 f4       	brne	.+20     	; 0xc0c <init_uart+0x56>
			PORTD.DIRSET = B8(00001000); //TX pin as output
     bf8:	a0 e6       	ldi	r26, 0x60	; 96
     bfa:	b6 e0       	ldi	r27, 0x06	; 6
     bfc:	88 e0       	ldi	r24, 0x08	; 8
     bfe:	11 96       	adiw	r26, 0x01	; 1
     c00:	8c 93       	st	X, r24
     c02:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(00001000); //TX initial output value is high
     c04:	15 96       	adiw	r26, 0x05	; 5
     c06:	8c 93       	st	X, r24
     c08:	15 97       	sbiw	r26, 0x05	; 5
     c0a:	1b c0       	rjmp	.+54     	; 0xc42 <init_uart+0x8c>
		}	
		else if (&(*which) == &USARTD1) {
     c0c:	89 e0       	ldi	r24, 0x09	; 9
     c0e:	e0 3b       	cpi	r30, 0xB0	; 176
     c10:	f8 07       	cpc	r31, r24
     c12:	51 f4       	brne	.+20     	; 0xc28 <init_uart+0x72>
			PORTD.DIRSET = B8(10000000); //TX pin as output
     c14:	a0 e6       	ldi	r26, 0x60	; 96
     c16:	b6 e0       	ldi	r27, 0x06	; 6
     c18:	80 e8       	ldi	r24, 0x80	; 128
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	8c 93       	st	X, r24
     c1e:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(10000000); //TX initial output value is high
     c20:	15 96       	adiw	r26, 0x05	; 5
     c22:	8c 93       	st	X, r24
     c24:	15 97       	sbiw	r26, 0x05	; 5
     c26:	0d c0       	rjmp	.+26     	; 0xc42 <init_uart+0x8c>
		}
		else if (&(*which) == &USARTE0) {
     c28:	8a e0       	ldi	r24, 0x0A	; 10
     c2a:	e0 3a       	cpi	r30, 0xA0	; 160
     c2c:	f8 07       	cpc	r31, r24
     c2e:	49 f4       	brne	.+18     	; 0xc42 <init_uart+0x8c>
			PORTE.DIRSET = B8(00001000); //TX pin as output
     c30:	a0 e8       	ldi	r26, 0x80	; 128
     c32:	b6 e0       	ldi	r27, 0x06	; 6
     c34:	88 e0       	ldi	r24, 0x08	; 8
     c36:	11 96       	adiw	r26, 0x01	; 1
     c38:	8c 93       	st	X, r24
     c3a:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(00001000); //TX initial output value is high
     c3c:	15 96       	adiw	r26, 0x05	; 5
     c3e:	8c 93       	st	X, r24
     c40:	15 97       	sbiw	r26, 0x05	; 5
		}
		else {
		}
	//Set baud rate
		switch(baud_rate){
     c42:	61 30       	cpi	r22, 0x01	; 1
     c44:	39 f0       	breq	.+14     	; 0xc54 <init_uart+0x9e>
     c46:	62 30       	cpi	r22, 0x02	; 2
     c48:	51 f4       	brne	.+20     	; 0xc5e <init_uart+0xa8>
		case BAUD_38400:
			//BSEL = 0xCC5; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xAC;
     c4a:	8c ea       	ldi	r24, 0xAC	; 172
     c4c:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0xC5;
     c4e:	85 ec       	ldi	r24, 0xC5	; 197
     c50:	86 83       	std	Z+6, r24	; 0x06
			break;
     c52:	09 c0       	rjmp	.+18     	; 0xc66 <init_uart+0xb0>
		case BAUD_57600:
			//BSEL = 0x86E; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA8;
     c54:	88 ea       	ldi	r24, 0xA8	; 168
     c56:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x6E;
     c58:	8e e6       	ldi	r24, 0x6E	; 110
     c5a:	86 83       	std	Z+6, r24	; 0x06
			break;
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <init_uart+0xb0>
		case BAUD_115200:
		default:
			//BSEL = 0x417; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA4;
     c5e:	84 ea       	ldi	r24, 0xA4	; 164
     c60:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x17;		
     c62:	87 e1       	ldi	r24, 0x17	; 23
     c64:	86 83       	std	Z+6, r24	; 0x06
		}
	//Config USART Module
		which->CTRLA = 0x00; //Current driver does not enable any interrupts
     c66:	13 82       	std	Z+3, r1	; 0x03
		which->CTRLB = B8(00011000); //Enable Rx and TX; Do not use double speed mode
     c68:	88 e1       	ldi	r24, 0x18	; 24
     c6a:	84 83       	std	Z+4, r24	; 0x04
		which->CTRLC = B8(00000011); //uart Mode; Use N-8-1 frame configuration
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	85 83       	std	Z+5, r24	; 0x05
	//
}
     c70:	08 95       	ret

00000c72 <uart_send_byte>:
//= DISPLAY (BLOCKING) FUNCTIONS
//==================================


//Sends one byte; Spin-lock until UART is ready to transmit (BE CAREFUL!)
void uart_send_byte( USART_t* which, unsigned char dataB){
     c72:	fc 01       	movw	r30, r24
	while((which->STATUS & USART_DREIF_bm) == 0x00); //wait until the transmit buffer is ready to receive new data (DREIF flag is 1 when empty)
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	85 ff       	sbrs	r24, 5
     c78:	fd cf       	rjmp	.-6      	; 0xc74 <uart_send_byte+0x2>
	which->DATA = dataB;	
     c7a:	60 83       	st	Z, r22
}
     c7c:	08 95       	ret

00000c7e <uart_send_BIN4>:

//Most Significant Bit first
void uart_send_BIN4(USART_t* which, uint8_t lowb){
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
	switch(lowb){
     c84:	67 30       	cpi	r22, 0x07	; 7
     c86:	09 f4       	brne	.+2      	; 0xc8a <uart_send_BIN4+0xc>
     c88:	9d c0       	rjmp	.+314    	; 0xdc4 <uart_send_BIN4+0x146>
     c8a:	68 30       	cpi	r22, 0x08	; 8
     c8c:	90 f4       	brcc	.+36     	; 0xcb2 <uart_send_BIN4+0x34>
     c8e:	63 30       	cpi	r22, 0x03	; 3
     c90:	09 f4       	brne	.+2      	; 0xc94 <uart_send_BIN4+0x16>
     c92:	58 c0       	rjmp	.+176    	; 0xd44 <uart_send_BIN4+0xc6>
     c94:	64 30       	cpi	r22, 0x04	; 4
     c96:	30 f4       	brcc	.+12     	; 0xca4 <uart_send_BIN4+0x26>
     c98:	61 30       	cpi	r22, 0x01	; 1
     c9a:	a1 f1       	breq	.+104    	; 0xd04 <uart_send_BIN4+0x86>
     c9c:	62 30       	cpi	r22, 0x02	; 2
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <uart_send_BIN4+0x24>
     ca0:	41 c0       	rjmp	.+130    	; 0xd24 <uart_send_BIN4+0xa6>
     ca2:	20 c0       	rjmp	.+64     	; 0xce4 <uart_send_BIN4+0x66>
     ca4:	65 30       	cpi	r22, 0x05	; 5
     ca6:	09 f4       	brne	.+2      	; 0xcaa <uart_send_BIN4+0x2c>
     ca8:	6d c0       	rjmp	.+218    	; 0xd84 <uart_send_BIN4+0x106>
     caa:	66 30       	cpi	r22, 0x06	; 6
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <uart_send_BIN4+0x32>
     cae:	7a c0       	rjmp	.+244    	; 0xda4 <uart_send_BIN4+0x126>
     cb0:	59 c0       	rjmp	.+178    	; 0xd64 <uart_send_BIN4+0xe6>
     cb2:	6b 30       	cpi	r22, 0x0B	; 11
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <uart_send_BIN4+0x3a>
     cb6:	c6 c0       	rjmp	.+396    	; 0xe44 <uart_send_BIN4+0x1c6>
     cb8:	6c 30       	cpi	r22, 0x0C	; 12
     cba:	38 f4       	brcc	.+14     	; 0xcca <uart_send_BIN4+0x4c>
     cbc:	69 30       	cpi	r22, 0x09	; 9
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <uart_send_BIN4+0x44>
     cc0:	a1 c0       	rjmp	.+322    	; 0xe04 <uart_send_BIN4+0x186>
     cc2:	6a 30       	cpi	r22, 0x0A	; 10
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <uart_send_BIN4+0x4a>
     cc6:	ae c0       	rjmp	.+348    	; 0xe24 <uart_send_BIN4+0x1a6>
     cc8:	8d c0       	rjmp	.+282    	; 0xde4 <uart_send_BIN4+0x166>
     cca:	6d 30       	cpi	r22, 0x0D	; 13
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <uart_send_BIN4+0x52>
     cce:	da c0       	rjmp	.+436    	; 0xe84 <uart_send_BIN4+0x206>
     cd0:	6d 30       	cpi	r22, 0x0D	; 13
     cd2:	08 f4       	brcc	.+2      	; 0xcd6 <uart_send_BIN4+0x58>
     cd4:	c7 c0       	rjmp	.+398    	; 0xe64 <uart_send_BIN4+0x1e6>
     cd6:	6e 30       	cpi	r22, 0x0E	; 14
     cd8:	09 f4       	brne	.+2      	; 0xcdc <uart_send_BIN4+0x5e>
     cda:	e4 c0       	rjmp	.+456    	; 0xea4 <uart_send_BIN4+0x226>
     cdc:	6f 30       	cpi	r22, 0x0F	; 15
     cde:	09 f0       	breq	.+2      	; 0xce2 <uart_send_BIN4+0x64>
     ce0:	00 c1       	rjmp	.+512    	; 0xee2 <uart_send_BIN4+0x264>
     ce2:	f0 c0       	rjmp	.+480    	; 0xec4 <uart_send_BIN4+0x246>
	case(0):
		uart_send_byte(which,'0');
     ce4:	60 e3       	ldi	r22, 0x30	; 48
     ce6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     cea:	ce 01       	movw	r24, r28
     cec:	60 e3       	ldi	r22, 0x30	; 48
     cee:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     cf2:	ce 01       	movw	r24, r28
     cf4:	60 e3       	ldi	r22, 0x30	; 48
     cf6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     cfa:	ce 01       	movw	r24, r28
     cfc:	60 e3       	ldi	r22, 0x30	; 48
     cfe:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     d02:	ef c0       	rjmp	.+478    	; 0xee2 <uart_send_BIN4+0x264>
	case(1):
		uart_send_byte(which,'0');
     d04:	60 e3       	ldi	r22, 0x30	; 48
     d06:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     d0a:	ce 01       	movw	r24, r28
     d0c:	60 e3       	ldi	r22, 0x30	; 48
     d0e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     d12:	ce 01       	movw	r24, r28
     d14:	60 e3       	ldi	r22, 0x30	; 48
     d16:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     d1a:	ce 01       	movw	r24, r28
     d1c:	61 e3       	ldi	r22, 0x31	; 49
     d1e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     d22:	df c0       	rjmp	.+446    	; 0xee2 <uart_send_BIN4+0x264>
	case(2):
		uart_send_byte(which,'0');
     d24:	60 e3       	ldi	r22, 0x30	; 48
     d26:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     d2a:	ce 01       	movw	r24, r28
     d2c:	60 e3       	ldi	r22, 0x30	; 48
     d2e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     d32:	ce 01       	movw	r24, r28
     d34:	61 e3       	ldi	r22, 0x31	; 49
     d36:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     d3a:	ce 01       	movw	r24, r28
     d3c:	60 e3       	ldi	r22, 0x30	; 48
     d3e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     d42:	cf c0       	rjmp	.+414    	; 0xee2 <uart_send_BIN4+0x264>
	case(3):
		uart_send_byte(which,'0');
     d44:	60 e3       	ldi	r22, 0x30	; 48
     d46:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     d4a:	ce 01       	movw	r24, r28
     d4c:	60 e3       	ldi	r22, 0x30	; 48
     d4e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     d52:	ce 01       	movw	r24, r28
     d54:	61 e3       	ldi	r22, 0x31	; 49
     d56:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     d5a:	ce 01       	movw	r24, r28
     d5c:	61 e3       	ldi	r22, 0x31	; 49
     d5e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     d62:	bf c0       	rjmp	.+382    	; 0xee2 <uart_send_BIN4+0x264>
	case(4):
		uart_send_byte(which,'0');
     d64:	60 e3       	ldi	r22, 0x30	; 48
     d66:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     d6a:	ce 01       	movw	r24, r28
     d6c:	61 e3       	ldi	r22, 0x31	; 49
     d6e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     d72:	ce 01       	movw	r24, r28
     d74:	60 e3       	ldi	r22, 0x30	; 48
     d76:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     d7a:	ce 01       	movw	r24, r28
     d7c:	60 e3       	ldi	r22, 0x30	; 48
     d7e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     d82:	af c0       	rjmp	.+350    	; 0xee2 <uart_send_BIN4+0x264>
	case(5):
		uart_send_byte(which,'0');
     d84:	60 e3       	ldi	r22, 0x30	; 48
     d86:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     d8a:	ce 01       	movw	r24, r28
     d8c:	61 e3       	ldi	r22, 0x31	; 49
     d8e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     d92:	ce 01       	movw	r24, r28
     d94:	60 e3       	ldi	r22, 0x30	; 48
     d96:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     d9a:	ce 01       	movw	r24, r28
     d9c:	61 e3       	ldi	r22, 0x31	; 49
     d9e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     da2:	9f c0       	rjmp	.+318    	; 0xee2 <uart_send_BIN4+0x264>
	case(6):
		uart_send_byte(which,'0');
     da4:	60 e3       	ldi	r22, 0x30	; 48
     da6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     daa:	ce 01       	movw	r24, r28
     dac:	61 e3       	ldi	r22, 0x31	; 49
     dae:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     db2:	ce 01       	movw	r24, r28
     db4:	61 e3       	ldi	r22, 0x31	; 49
     db6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     dba:	ce 01       	movw	r24, r28
     dbc:	60 e3       	ldi	r22, 0x30	; 48
     dbe:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     dc2:	8f c0       	rjmp	.+286    	; 0xee2 <uart_send_BIN4+0x264>
	case(7):
		uart_send_byte(which,'0');
     dc4:	60 e3       	ldi	r22, 0x30	; 48
     dc6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     dca:	ce 01       	movw	r24, r28
     dcc:	61 e3       	ldi	r22, 0x31	; 49
     dce:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     dd2:	ce 01       	movw	r24, r28
     dd4:	61 e3       	ldi	r22, 0x31	; 49
     dd6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     dda:	ce 01       	movw	r24, r28
     ddc:	61 e3       	ldi	r22, 0x31	; 49
     dde:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     de2:	7f c0       	rjmp	.+254    	; 0xee2 <uart_send_BIN4+0x264>
	case(8):
		uart_send_byte(which,'1');
     de4:	61 e3       	ldi	r22, 0x31	; 49
     de6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     dea:	ce 01       	movw	r24, r28
     dec:	60 e3       	ldi	r22, 0x30	; 48
     dee:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     df2:	ce 01       	movw	r24, r28
     df4:	60 e3       	ldi	r22, 0x30	; 48
     df6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     dfa:	ce 01       	movw	r24, r28
     dfc:	60 e3       	ldi	r22, 0x30	; 48
     dfe:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     e02:	6f c0       	rjmp	.+222    	; 0xee2 <uart_send_BIN4+0x264>
	case(9):
		uart_send_byte(which,'1');
     e04:	61 e3       	ldi	r22, 0x31	; 49
     e06:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     e0a:	ce 01       	movw	r24, r28
     e0c:	60 e3       	ldi	r22, 0x30	; 48
     e0e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     e12:	ce 01       	movw	r24, r28
     e14:	60 e3       	ldi	r22, 0x30	; 48
     e16:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     e1a:	ce 01       	movw	r24, r28
     e1c:	61 e3       	ldi	r22, 0x31	; 49
     e1e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     e22:	5f c0       	rjmp	.+190    	; 0xee2 <uart_send_BIN4+0x264>
	case(10):
		uart_send_byte(which,'1');
     e24:	61 e3       	ldi	r22, 0x31	; 49
     e26:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     e2a:	ce 01       	movw	r24, r28
     e2c:	60 e3       	ldi	r22, 0x30	; 48
     e2e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     e32:	ce 01       	movw	r24, r28
     e34:	61 e3       	ldi	r22, 0x31	; 49
     e36:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     e3a:	ce 01       	movw	r24, r28
     e3c:	60 e3       	ldi	r22, 0x30	; 48
     e3e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     e42:	4f c0       	rjmp	.+158    	; 0xee2 <uart_send_BIN4+0x264>
	case(11):
		uart_send_byte(which,'1');
     e44:	61 e3       	ldi	r22, 0x31	; 49
     e46:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     e4a:	ce 01       	movw	r24, r28
     e4c:	60 e3       	ldi	r22, 0x30	; 48
     e4e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     e52:	ce 01       	movw	r24, r28
     e54:	61 e3       	ldi	r22, 0x31	; 49
     e56:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     e5a:	ce 01       	movw	r24, r28
     e5c:	61 e3       	ldi	r22, 0x31	; 49
     e5e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     e62:	3f c0       	rjmp	.+126    	; 0xee2 <uart_send_BIN4+0x264>
	case(12):
		uart_send_byte(which,'1');
     e64:	61 e3       	ldi	r22, 0x31	; 49
     e66:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     e6a:	ce 01       	movw	r24, r28
     e6c:	61 e3       	ldi	r22, 0x31	; 49
     e6e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     e72:	ce 01       	movw	r24, r28
     e74:	60 e3       	ldi	r22, 0x30	; 48
     e76:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     e7a:	ce 01       	movw	r24, r28
     e7c:	60 e3       	ldi	r22, 0x30	; 48
     e7e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     e82:	2f c0       	rjmp	.+94     	; 0xee2 <uart_send_BIN4+0x264>
	case(13):
		uart_send_byte(which,'1');
     e84:	61 e3       	ldi	r22, 0x31	; 49
     e86:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     e8a:	ce 01       	movw	r24, r28
     e8c:	61 e3       	ldi	r22, 0x31	; 49
     e8e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     e92:	ce 01       	movw	r24, r28
     e94:	60 e3       	ldi	r22, 0x30	; 48
     e96:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     e9a:	ce 01       	movw	r24, r28
     e9c:	61 e3       	ldi	r22, 0x31	; 49
     e9e:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     ea2:	1f c0       	rjmp	.+62     	; 0xee2 <uart_send_BIN4+0x264>
	case(14):
		uart_send_byte(which,'1');
     ea4:	61 e3       	ldi	r22, 0x31	; 49
     ea6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     eaa:	ce 01       	movw	r24, r28
     eac:	61 e3       	ldi	r22, 0x31	; 49
     eae:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     eb2:	ce 01       	movw	r24, r28
     eb4:	61 e3       	ldi	r22, 0x31	; 49
     eb6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'0');
     eba:	ce 01       	movw	r24, r28
     ebc:	60 e3       	ldi	r22, 0x30	; 48
     ebe:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     ec2:	0f c0       	rjmp	.+30     	; 0xee2 <uart_send_BIN4+0x264>
	case(15):
		uart_send_byte(which,'1');
     ec4:	61 e3       	ldi	r22, 0x31	; 49
     ec6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     eca:	ce 01       	movw	r24, r28
     ecc:	61 e3       	ldi	r22, 0x31	; 49
     ece:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     ed2:	ce 01       	movw	r24, r28
     ed4:	61 e3       	ldi	r22, 0x31	; 49
     ed6:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		uart_send_byte(which,'1');
     eda:	ce 01       	movw	r24, r28
     edc:	61 e3       	ldi	r22, 0x31	; 49
     ede:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
	}	
}
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <uart_send_BIN8>:

//Sends out tosend as ASCII text in 'b01101010' format
void uart_send_BIN8(USART_t* which, uint8_t lowb){
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	ec 01       	movw	r28, r24
     ef0:	16 2f       	mov	r17, r22
	uart_send_byte(which,'b');
     ef2:	62 e6       	ldi	r22, 0x62	; 98
     ef4:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
	uart_send_BIN4(which, lowb>>4);
     ef8:	61 2f       	mov	r22, r17
     efa:	62 95       	swap	r22
     efc:	6f 70       	andi	r22, 0x0F	; 15
     efe:	ce 01       	movw	r24, r28
     f00:	0e 94 3f 06 	call	0xc7e	; 0xc7e <uart_send_BIN4>
	uart_send_BIN4(which, lowb & 0x0F);
     f04:	61 2f       	mov	r22, r17
     f06:	6f 70       	andi	r22, 0x0F	; 15
     f08:	ce 01       	movw	r24, r28
     f0a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <uart_send_BIN4>
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	08 95       	ret

00000f16 <uart_send_HEX4>:
	
void uart_send_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
     f16:	67 30       	cpi	r22, 0x07	; 7
     f18:	09 f4       	brne	.+2      	; 0xf1c <uart_send_HEX4+0x6>
     f1a:	3f c0       	rjmp	.+126    	; 0xf9a <uart_send_HEX4+0x84>
     f1c:	68 30       	cpi	r22, 0x08	; 8
     f1e:	70 f4       	brcc	.+28     	; 0xf3c <uart_send_HEX4+0x26>
     f20:	63 30       	cpi	r22, 0x03	; 3
     f22:	59 f1       	breq	.+86     	; 0xf7a <uart_send_HEX4+0x64>
     f24:	64 30       	cpi	r22, 0x04	; 4
     f26:	28 f4       	brcc	.+10     	; 0xf32 <uart_send_HEX4+0x1c>
     f28:	61 30       	cpi	r22, 0x01	; 1
     f2a:	f9 f0       	breq	.+62     	; 0xf6a <uart_send_HEX4+0x54>
     f2c:	62 30       	cpi	r22, 0x02	; 2
     f2e:	08 f5       	brcc	.+66     	; 0xf72 <uart_send_HEX4+0x5c>
     f30:	18 c0       	rjmp	.+48     	; 0xf62 <uart_send_HEX4+0x4c>
     f32:	65 30       	cpi	r22, 0x05	; 5
     f34:	51 f1       	breq	.+84     	; 0xf8a <uart_send_HEX4+0x74>
     f36:	66 30       	cpi	r22, 0x06	; 6
     f38:	60 f5       	brcc	.+88     	; 0xf92 <uart_send_HEX4+0x7c>
     f3a:	23 c0       	rjmp	.+70     	; 0xf82 <uart_send_HEX4+0x6c>
     f3c:	6b 30       	cpi	r22, 0x0B	; 11
     f3e:	e9 f1       	breq	.+122    	; 0xfba <uart_send_HEX4+0xa4>
     f40:	6c 30       	cpi	r22, 0x0C	; 12
     f42:	28 f4       	brcc	.+10     	; 0xf4e <uart_send_HEX4+0x38>
     f44:	69 30       	cpi	r22, 0x09	; 9
     f46:	89 f1       	breq	.+98     	; 0xfaa <uart_send_HEX4+0x94>
     f48:	6a 30       	cpi	r22, 0x0A	; 10
     f4a:	98 f5       	brcc	.+102    	; 0xfb2 <uart_send_HEX4+0x9c>
     f4c:	2a c0       	rjmp	.+84     	; 0xfa2 <uart_send_HEX4+0x8c>
     f4e:	6d 30       	cpi	r22, 0x0D	; 13
     f50:	e1 f1       	breq	.+120    	; 0xfca <uart_send_HEX4+0xb4>
     f52:	6d 30       	cpi	r22, 0x0D	; 13
     f54:	b0 f1       	brcs	.+108    	; 0xfc2 <uart_send_HEX4+0xac>
     f56:	6e 30       	cpi	r22, 0x0E	; 14
     f58:	e1 f1       	breq	.+120    	; 0xfd2 <uart_send_HEX4+0xbc>
     f5a:	6f 30       	cpi	r22, 0x0F	; 15
     f5c:	09 f0       	breq	.+2      	; 0xf60 <uart_send_HEX4+0x4a>
     f5e:	40 c0       	rjmp	.+128    	; 0xfe0 <uart_send_HEX4+0xca>
     f60:	3c c0       	rjmp	.+120    	; 0xfda <uart_send_HEX4+0xc4>
	case(0):
		uart_send_byte( which, '0');
     f62:	60 e3       	ldi	r22, 0x30	; 48
     f64:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     f68:	08 95       	ret
	case(1):
		uart_send_byte( which, '1');
     f6a:	61 e3       	ldi	r22, 0x31	; 49
     f6c:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     f70:	08 95       	ret
	case(2):
		uart_send_byte( which, '2');
     f72:	62 e3       	ldi	r22, 0x32	; 50
     f74:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     f78:	08 95       	ret
	case(3):
		uart_send_byte( which, '3');
     f7a:	63 e3       	ldi	r22, 0x33	; 51
     f7c:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     f80:	08 95       	ret
	case(4):
		uart_send_byte( which, '4');
     f82:	64 e3       	ldi	r22, 0x34	; 52
     f84:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     f88:	08 95       	ret
	case(5):
		uart_send_byte( which, '5');
     f8a:	65 e3       	ldi	r22, 0x35	; 53
     f8c:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     f90:	08 95       	ret
	case(6):
		uart_send_byte( which, '6');
     f92:	66 e3       	ldi	r22, 0x36	; 54
     f94:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     f98:	08 95       	ret
	case(7):
		uart_send_byte( which, '7');
     f9a:	67 e3       	ldi	r22, 0x37	; 55
     f9c:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     fa0:	08 95       	ret
	case(8):
		uart_send_byte( which, '8');
     fa2:	68 e3       	ldi	r22, 0x38	; 56
     fa4:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     fa8:	08 95       	ret
	case(9):
		uart_send_byte( which, '9');
     faa:	69 e3       	ldi	r22, 0x39	; 57
     fac:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     fb0:	08 95       	ret
	case(10):
		uart_send_byte( which, 'A');
     fb2:	61 e4       	ldi	r22, 0x41	; 65
     fb4:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     fb8:	08 95       	ret
	case(11):
		uart_send_byte( which, 'B');
     fba:	62 e4       	ldi	r22, 0x42	; 66
     fbc:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     fc0:	08 95       	ret
	case(12):
		uart_send_byte( which, 'C');
     fc2:	63 e4       	ldi	r22, 0x43	; 67
     fc4:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     fc8:	08 95       	ret
	case(13):
		uart_send_byte( which, 'D');
     fca:	64 e4       	ldi	r22, 0x44	; 68
     fcc:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     fd0:	08 95       	ret
	case(14):
		uart_send_byte( which, 'E');
     fd2:	65 e4       	ldi	r22, 0x45	; 69
     fd4:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
		break;
     fd8:	08 95       	ret
	case(15):
		uart_send_byte( which, 'F');
     fda:	66 e4       	ldi	r22, 0x46	; 70
     fdc:	0e 94 39 06 	call	0xc72	; 0xc72 <uart_send_byte>
     fe0:	08 95       	ret

00000fe2 <uart_send_HEX8>:
		break;
	}	
}

void uart_send_HEX8(USART_t* which, uint8_t lowb){
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	ec 01       	movw	r28, r24
     fea:	16 2f       	mov	r17, r22
	uart_send_HEX4(which, lowb>>4);
     fec:	62 95       	swap	r22
     fee:	6f 70       	andi	r22, 0x0F	; 15
     ff0:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_send_HEX4>
	uart_send_HEX4(which, lowb & 0x0F);
     ff4:	61 2f       	mov	r22, r17
     ff6:	6f 70       	andi	r22, 0x0F	; 15
     ff8:	ce 01       	movw	r24, r28
     ffa:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_send_HEX4>
}
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	08 95       	ret

00001006 <uart_send_HEX16b>:

void uart_send_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ec 01       	movw	r28, r24
    100e:	14 2f       	mov	r17, r20
	uart_send_HEX8(which, highb);
    1010:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <uart_send_HEX8>
	uart_send_HEX8(which, lowb);
    1014:	ce 01       	movw	r24, r28
    1016:	61 2f       	mov	r22, r17
    1018:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <uart_send_HEX8>
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	08 95       	ret

00001024 <uart_send_HEX16>:

void uart_send_HEX16(USART_t* which, uint16_t highb){
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
    102c:	16 2f       	mov	r17, r22
    102e:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_send_HEX8(which, blah);
    1030:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <uart_send_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_send_HEX8(which, blah);
    1034:	ce 01       	movw	r24, r28
    1036:	61 2f       	mov	r22, r17
    1038:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <uart_send_HEX8>
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	08 95       	ret

00001044 <uart_enq_BIN4>:
//======================================================================


//Most Significant Bit first
void uart_enq_BIN4(uint8_t lowb){
	switch(lowb){
    1044:	87 30       	cpi	r24, 0x07	; 7
    1046:	09 f4       	brne	.+2      	; 0x104a <uart_enq_BIN4+0x6>
    1048:	87 c0       	rjmp	.+270    	; 0x1158 <uart_enq_BIN4+0x114>
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	88 f4       	brcc	.+34     	; 0x1070 <uart_enq_BIN4+0x2c>
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	09 f4       	brne	.+2      	; 0x1054 <uart_enq_BIN4+0x10>
    1052:	4e c0       	rjmp	.+156    	; 0x10f0 <uart_enq_BIN4+0xac>
    1054:	84 30       	cpi	r24, 0x04	; 4
    1056:	28 f4       	brcc	.+10     	; 0x1062 <uart_enq_BIN4+0x1e>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	81 f1       	breq	.+96     	; 0x10bc <uart_enq_BIN4+0x78>
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	d8 f5       	brcc	.+118    	; 0x10d6 <uart_enq_BIN4+0x92>
    1060:	20 c0       	rjmp	.+64     	; 0x10a2 <uart_enq_BIN4+0x5e>
    1062:	85 30       	cpi	r24, 0x05	; 5
    1064:	09 f4       	brne	.+2      	; 0x1068 <uart_enq_BIN4+0x24>
    1066:	5e c0       	rjmp	.+188    	; 0x1124 <uart_enq_BIN4+0xe0>
    1068:	86 30       	cpi	r24, 0x06	; 6
    106a:	08 f0       	brcs	.+2      	; 0x106e <uart_enq_BIN4+0x2a>
    106c:	68 c0       	rjmp	.+208    	; 0x113e <uart_enq_BIN4+0xfa>
    106e:	4d c0       	rjmp	.+154    	; 0x110a <uart_enq_BIN4+0xc6>
    1070:	8b 30       	cpi	r24, 0x0B	; 11
    1072:	09 f4       	brne	.+2      	; 0x1076 <uart_enq_BIN4+0x32>
    1074:	a5 c0       	rjmp	.+330    	; 0x11c0 <uart_enq_BIN4+0x17c>
    1076:	8c 30       	cpi	r24, 0x0C	; 12
    1078:	38 f4       	brcc	.+14     	; 0x1088 <uart_enq_BIN4+0x44>
    107a:	89 30       	cpi	r24, 0x09	; 9
    107c:	09 f4       	brne	.+2      	; 0x1080 <uart_enq_BIN4+0x3c>
    107e:	86 c0       	rjmp	.+268    	; 0x118c <uart_enq_BIN4+0x148>
    1080:	8a 30       	cpi	r24, 0x0A	; 10
    1082:	08 f0       	brcs	.+2      	; 0x1086 <uart_enq_BIN4+0x42>
    1084:	90 c0       	rjmp	.+288    	; 0x11a6 <uart_enq_BIN4+0x162>
    1086:	75 c0       	rjmp	.+234    	; 0x1172 <uart_enq_BIN4+0x12e>
    1088:	8d 30       	cpi	r24, 0x0D	; 13
    108a:	09 f4       	brne	.+2      	; 0x108e <uart_enq_BIN4+0x4a>
    108c:	b3 c0       	rjmp	.+358    	; 0x11f4 <uart_enq_BIN4+0x1b0>
    108e:	8d 30       	cpi	r24, 0x0D	; 13
    1090:	08 f4       	brcc	.+2      	; 0x1094 <uart_enq_BIN4+0x50>
    1092:	a3 c0       	rjmp	.+326    	; 0x11da <uart_enq_BIN4+0x196>
    1094:	8e 30       	cpi	r24, 0x0E	; 14
    1096:	09 f4       	brne	.+2      	; 0x109a <uart_enq_BIN4+0x56>
    1098:	ba c0       	rjmp	.+372    	; 0x120e <uart_enq_BIN4+0x1ca>
    109a:	8f 30       	cpi	r24, 0x0F	; 15
    109c:	09 f0       	breq	.+2      	; 0x10a0 <uart_enq_BIN4+0x5c>
    109e:	d0 c0       	rjmp	.+416    	; 0x1240 <uart_enq_BIN4+0x1fc>
    10a0:	c3 c0       	rjmp	.+390    	; 0x1228 <uart_enq_BIN4+0x1e4>
	case(0):
		uart_enqueue('0');
    10a2:	80 e3       	ldi	r24, 0x30	; 48
    10a4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    10a8:	80 e3       	ldi	r24, 0x30	; 48
    10aa:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    10ae:	80 e3       	ldi	r24, 0x30	; 48
    10b0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    10b4:	80 e3       	ldi	r24, 0x30	; 48
    10b6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    10ba:	08 95       	ret
	case(1):
		uart_enqueue('0');
    10bc:	80 e3       	ldi	r24, 0x30	; 48
    10be:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    10c2:	80 e3       	ldi	r24, 0x30	; 48
    10c4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    10c8:	80 e3       	ldi	r24, 0x30	; 48
    10ca:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    10ce:	81 e3       	ldi	r24, 0x31	; 49
    10d0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    10d4:	08 95       	ret
	case(2):
		uart_enqueue('0');
    10d6:	80 e3       	ldi	r24, 0x30	; 48
    10d8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    10dc:	80 e3       	ldi	r24, 0x30	; 48
    10de:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    10e2:	81 e3       	ldi	r24, 0x31	; 49
    10e4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    10e8:	80 e3       	ldi	r24, 0x30	; 48
    10ea:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    10ee:	08 95       	ret
	case(3):
		uart_enqueue('0');
    10f0:	80 e3       	ldi	r24, 0x30	; 48
    10f2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    10f6:	80 e3       	ldi	r24, 0x30	; 48
    10f8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    10fc:	81 e3       	ldi	r24, 0x31	; 49
    10fe:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    1102:	81 e3       	ldi	r24, 0x31	; 49
    1104:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    1108:	08 95       	ret
	case(4):
		uart_enqueue('0');
    110a:	80 e3       	ldi	r24, 0x30	; 48
    110c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    1110:	81 e3       	ldi	r24, 0x31	; 49
    1112:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    1116:	80 e3       	ldi	r24, 0x30	; 48
    1118:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    111c:	80 e3       	ldi	r24, 0x30	; 48
    111e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    1122:	08 95       	ret
	case(5):
		uart_enqueue('0');
    1124:	80 e3       	ldi	r24, 0x30	; 48
    1126:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    112a:	81 e3       	ldi	r24, 0x31	; 49
    112c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    1130:	80 e3       	ldi	r24, 0x30	; 48
    1132:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    1136:	81 e3       	ldi	r24, 0x31	; 49
    1138:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    113c:	08 95       	ret
	case(6):
		uart_enqueue('0');
    113e:	80 e3       	ldi	r24, 0x30	; 48
    1140:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    1144:	81 e3       	ldi	r24, 0x31	; 49
    1146:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    114a:	81 e3       	ldi	r24, 0x31	; 49
    114c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    1150:	80 e3       	ldi	r24, 0x30	; 48
    1152:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    1156:	08 95       	ret
	case(7):
		uart_enqueue('0');
    1158:	80 e3       	ldi	r24, 0x30	; 48
    115a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    115e:	81 e3       	ldi	r24, 0x31	; 49
    1160:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    1164:	81 e3       	ldi	r24, 0x31	; 49
    1166:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    116a:	81 e3       	ldi	r24, 0x31	; 49
    116c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    1170:	08 95       	ret
	case(8):
		uart_enqueue('1');
    1172:	81 e3       	ldi	r24, 0x31	; 49
    1174:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    1178:	80 e3       	ldi	r24, 0x30	; 48
    117a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    117e:	80 e3       	ldi	r24, 0x30	; 48
    1180:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    1184:	80 e3       	ldi	r24, 0x30	; 48
    1186:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    118a:	08 95       	ret
	case(9):
		uart_enqueue('1');
    118c:	81 e3       	ldi	r24, 0x31	; 49
    118e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    1192:	80 e3       	ldi	r24, 0x30	; 48
    1194:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    1198:	80 e3       	ldi	r24, 0x30	; 48
    119a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    119e:	81 e3       	ldi	r24, 0x31	; 49
    11a0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    11a4:	08 95       	ret
	case(10):
		uart_enqueue('1');
    11a6:	81 e3       	ldi	r24, 0x31	; 49
    11a8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    11ac:	80 e3       	ldi	r24, 0x30	; 48
    11ae:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    11b2:	81 e3       	ldi	r24, 0x31	; 49
    11b4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    11b8:	80 e3       	ldi	r24, 0x30	; 48
    11ba:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    11be:	08 95       	ret
	case(11):
		uart_enqueue('1');
    11c0:	81 e3       	ldi	r24, 0x31	; 49
    11c2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    11c6:	80 e3       	ldi	r24, 0x30	; 48
    11c8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    11cc:	81 e3       	ldi	r24, 0x31	; 49
    11ce:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    11d2:	81 e3       	ldi	r24, 0x31	; 49
    11d4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    11d8:	08 95       	ret
	case(12):
		uart_enqueue('1');
    11da:	81 e3       	ldi	r24, 0x31	; 49
    11dc:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    11e0:	81 e3       	ldi	r24, 0x31	; 49
    11e2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    11e6:	80 e3       	ldi	r24, 0x30	; 48
    11e8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    11ec:	80 e3       	ldi	r24, 0x30	; 48
    11ee:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    11f2:	08 95       	ret
	case(13):
		uart_enqueue('1');
    11f4:	81 e3       	ldi	r24, 0x31	; 49
    11f6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    11fa:	81 e3       	ldi	r24, 0x31	; 49
    11fc:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    1200:	80 e3       	ldi	r24, 0x30	; 48
    1202:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    1206:	81 e3       	ldi	r24, 0x31	; 49
    1208:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    120c:	08 95       	ret
	case(14):
		uart_enqueue('1');
    120e:	81 e3       	ldi	r24, 0x31	; 49
    1210:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    1214:	81 e3       	ldi	r24, 0x31	; 49
    1216:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    121a:	81 e3       	ldi	r24, 0x31	; 49
    121c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('0');
    1220:	80 e3       	ldi	r24, 0x30	; 48
    1222:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    1226:	08 95       	ret
	case(15):
		uart_enqueue('1');
    1228:	81 e3       	ldi	r24, 0x31	; 49
    122a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    122e:	81 e3       	ldi	r24, 0x31	; 49
    1230:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    1234:	81 e3       	ldi	r24, 0x31	; 49
    1236:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		uart_enqueue('1');
    123a:	81 e3       	ldi	r24, 0x31	; 49
    123c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
    1240:	08 95       	ret

00001242 <uart_enq_BIN8>:
		break;
	}	
}

//enqs out toenq as ASCII text in 'b01101010' format
void uart_enq_BIN8(uint8_t lowb){
    1242:	cf 93       	push	r28
    1244:	c8 2f       	mov	r28, r24
	uart_enqueue('b');
    1246:	82 e6       	ldi	r24, 0x62	; 98
    1248:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
	uart_enq_BIN4(lowb>>4);
    124c:	8c 2f       	mov	r24, r28
    124e:	82 95       	swap	r24
    1250:	8f 70       	andi	r24, 0x0F	; 15
    1252:	0e 94 22 08 	call	0x1044	; 0x1044 <uart_enq_BIN4>
	uart_enq_BIN4(lowb & 0x0F);
    1256:	8c 2f       	mov	r24, r28
    1258:	8f 70       	andi	r24, 0x0F	; 15
    125a:	0e 94 22 08 	call	0x1044	; 0x1044 <uart_enq_BIN4>
}
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <uart_enq_HEX4>:
	

void uart_enq_HEX4(uint8_t lowb){
	switch(lowb){
    1262:	87 30       	cpi	r24, 0x07	; 7
    1264:	09 f4       	brne	.+2      	; 0x1268 <uart_enq_HEX4+0x6>
    1266:	3f c0       	rjmp	.+126    	; 0x12e6 <uart_enq_HEX4+0x84>
    1268:	88 30       	cpi	r24, 0x08	; 8
    126a:	70 f4       	brcc	.+28     	; 0x1288 <uart_enq_HEX4+0x26>
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	59 f1       	breq	.+86     	; 0x12c6 <uart_enq_HEX4+0x64>
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	28 f4       	brcc	.+10     	; 0x127e <uart_enq_HEX4+0x1c>
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	f9 f0       	breq	.+62     	; 0x12b6 <uart_enq_HEX4+0x54>
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	08 f5       	brcc	.+66     	; 0x12be <uart_enq_HEX4+0x5c>
    127c:	18 c0       	rjmp	.+48     	; 0x12ae <uart_enq_HEX4+0x4c>
    127e:	85 30       	cpi	r24, 0x05	; 5
    1280:	51 f1       	breq	.+84     	; 0x12d6 <uart_enq_HEX4+0x74>
    1282:	86 30       	cpi	r24, 0x06	; 6
    1284:	60 f5       	brcc	.+88     	; 0x12de <uart_enq_HEX4+0x7c>
    1286:	23 c0       	rjmp	.+70     	; 0x12ce <uart_enq_HEX4+0x6c>
    1288:	8b 30       	cpi	r24, 0x0B	; 11
    128a:	e9 f1       	breq	.+122    	; 0x1306 <uart_enq_HEX4+0xa4>
    128c:	8c 30       	cpi	r24, 0x0C	; 12
    128e:	28 f4       	brcc	.+10     	; 0x129a <uart_enq_HEX4+0x38>
    1290:	89 30       	cpi	r24, 0x09	; 9
    1292:	89 f1       	breq	.+98     	; 0x12f6 <uart_enq_HEX4+0x94>
    1294:	8a 30       	cpi	r24, 0x0A	; 10
    1296:	98 f5       	brcc	.+102    	; 0x12fe <uart_enq_HEX4+0x9c>
    1298:	2a c0       	rjmp	.+84     	; 0x12ee <uart_enq_HEX4+0x8c>
    129a:	8d 30       	cpi	r24, 0x0D	; 13
    129c:	e1 f1       	breq	.+120    	; 0x1316 <uart_enq_HEX4+0xb4>
    129e:	8d 30       	cpi	r24, 0x0D	; 13
    12a0:	b0 f1       	brcs	.+108    	; 0x130e <uart_enq_HEX4+0xac>
    12a2:	8e 30       	cpi	r24, 0x0E	; 14
    12a4:	e1 f1       	breq	.+120    	; 0x131e <uart_enq_HEX4+0xbc>
    12a6:	8f 30       	cpi	r24, 0x0F	; 15
    12a8:	09 f0       	breq	.+2      	; 0x12ac <uart_enq_HEX4+0x4a>
    12aa:	40 c0       	rjmp	.+128    	; 0x132c <uart_enq_HEX4+0xca>
    12ac:	3c c0       	rjmp	.+120    	; 0x1326 <uart_enq_HEX4+0xc4>
	case(0):
		uart_enqueue( '0');
    12ae:	80 e3       	ldi	r24, 0x30	; 48
    12b0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12b4:	08 95       	ret
	case(1):
		uart_enqueue( '1');
    12b6:	81 e3       	ldi	r24, 0x31	; 49
    12b8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12bc:	08 95       	ret
	case(2):
		uart_enqueue( '2');
    12be:	82 e3       	ldi	r24, 0x32	; 50
    12c0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12c4:	08 95       	ret
	case(3):
		uart_enqueue( '3');
    12c6:	83 e3       	ldi	r24, 0x33	; 51
    12c8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12cc:	08 95       	ret
	case(4):
		uart_enqueue( '4');
    12ce:	84 e3       	ldi	r24, 0x34	; 52
    12d0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12d4:	08 95       	ret
	case(5):
		uart_enqueue( '5');
    12d6:	85 e3       	ldi	r24, 0x35	; 53
    12d8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12dc:	08 95       	ret
	case(6):
		uart_enqueue( '6');
    12de:	86 e3       	ldi	r24, 0x36	; 54
    12e0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12e4:	08 95       	ret
	case(7):
		uart_enqueue( '7');
    12e6:	87 e3       	ldi	r24, 0x37	; 55
    12e8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12ec:	08 95       	ret
	case(8):
		uart_enqueue( '8');
    12ee:	88 e3       	ldi	r24, 0x38	; 56
    12f0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12f4:	08 95       	ret
	case(9):
		uart_enqueue( '9');
    12f6:	89 e3       	ldi	r24, 0x39	; 57
    12f8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    12fc:	08 95       	ret
	case(10):
		uart_enqueue( 'A');
    12fe:	81 e4       	ldi	r24, 0x41	; 65
    1300:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    1304:	08 95       	ret
	case(11):
		uart_enqueue( 'B');
    1306:	82 e4       	ldi	r24, 0x42	; 66
    1308:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    130c:	08 95       	ret
	case(12):
		uart_enqueue( 'C');
    130e:	83 e4       	ldi	r24, 0x43	; 67
    1310:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    1314:	08 95       	ret
	case(13):
		uart_enqueue( 'D');
    1316:	84 e4       	ldi	r24, 0x44	; 68
    1318:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    131c:	08 95       	ret
	case(14):
		uart_enqueue( 'E');
    131e:	85 e4       	ldi	r24, 0x45	; 69
    1320:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
		break;
    1324:	08 95       	ret
	case(15):
		uart_enqueue( 'F');
    1326:	86 e4       	ldi	r24, 0x46	; 70
    1328:	0e 94 aa 0a 	call	0x1554	; 0x1554 <uart_enqueue>
    132c:	08 95       	ret

0000132e <uart_enq_HEX8>:
		break;
	}	
}

void uart_enq_HEX8(uint8_t lowb){
    132e:	cf 93       	push	r28
    1330:	c8 2f       	mov	r28, r24
	uart_enq_HEX4(lowb>>4);
    1332:	82 95       	swap	r24
    1334:	8f 70       	andi	r24, 0x0F	; 15
    1336:	0e 94 31 09 	call	0x1262	; 0x1262 <uart_enq_HEX4>
	uart_enq_HEX4(lowb & 0x0F);
    133a:	8c 2f       	mov	r24, r28
    133c:	8f 70       	andi	r24, 0x0F	; 15
    133e:	0e 94 31 09 	call	0x1262	; 0x1262 <uart_enq_HEX4>
}
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <uart_enq_HEX16b>:

void uart_enq_HEX16b(uint8_t highb, uint8_t lowb){
    1346:	cf 93       	push	r28
    1348:	c6 2f       	mov	r28, r22
	uart_enq_HEX8(highb);
    134a:	0e 94 97 09 	call	0x132e	; 0x132e <uart_enq_HEX8>
	uart_enq_HEX8(lowb);
    134e:	8c 2f       	mov	r24, r28
    1350:	0e 94 97 09 	call	0x132e	; 0x132e <uart_enq_HEX8>
}
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <uart_enq_HEX16>:

void uart_enq_HEX16(uint16_t highb){
    1358:	cf 93       	push	r28
    135a:	c8 2f       	mov	r28, r24
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_enq_HEX8(blah);
    135c:	89 2f       	mov	r24, r25
    135e:	0e 94 97 09 	call	0x132e	; 0x132e <uart_enq_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_enq_HEX8(blah);
    1362:	8c 2f       	mov	r24, r28
    1364:	0e 94 97 09 	call	0x132e	; 0x132e <uart_enq_HEX8>
}
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <uart_txbuffer_enable>:
		init_uart_obuffer();
		//init_uart_ibuffer(); //not implemented yet!
}

void uart_txbuffer_enable(){
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    136c:	e0 91 17 21 	lds	r30, 0x2117
    1370:	f0 91 18 21 	lds	r31, 0x2118
    1374:	83 81       	ldd	r24, Z+3	; 0x03
    1376:	82 60       	ori	r24, 0x02	; 2
    1378:	83 83       	std	Z+3, r24	; 0x03
}
    137a:	08 95       	ret

0000137c <uart_txbuffer_disable>:

void uart_txbuffer_disable(){
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    137c:	e0 91 17 21 	lds	r30, 0x2117
    1380:	f0 91 18 21 	lds	r31, 0x2118
    1384:	83 81       	ldd	r24, Z+3	; 0x03
    1386:	8c 7f       	andi	r24, 0xFC	; 252
    1388:	83 83       	std	Z+3, r24	; 0x03
}
    138a:	08 95       	ret

0000138c <uart_transmit>:
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    138c:	e0 91 17 21 	lds	r30, 0x2117
    1390:	f0 91 18 21 	lds	r31, 0x2118
    1394:	81 81       	ldd	r24, Z+1	; 0x01
    1396:	85 fd       	sbrc	r24, 5
    1398:	1b c0       	rjmp	.+54     	; 0x13d0 <uart_transmit+0x44>
    139a:	30 c0       	rjmp	.+96     	; 0x13fc <uart_transmit+0x70>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    139c:	20 91 16 21 	lds	r18, 0x2116
	uart_tail++;
    13a0:	30 91 16 21 	lds	r19, 0x2116
    13a4:	3f 5f       	subi	r19, 0xFF	; 255
    13a6:	30 93 16 21 	sts	0x2116, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    13aa:	30 91 16 21 	lds	r19, 0x2116
    13ae:	3a 3f       	cpi	r19, 0xFA	; 250
    13b0:	10 f0       	brcs	.+4      	; 0x13b6 <uart_transmit+0x2a>
		uart_tail = 0;
    13b2:	10 92 16 21 	sts	0x2116, r1
	}
	return uart_buffer[oldtail];
    13b6:	dc 01       	movw	r26, r24
    13b8:	a2 0f       	add	r26, r18
    13ba:	b1 1d       	adc	r27, r1
    13bc:	2c 91       	ld	r18, X
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		port->DATA = uart_dequeue();
    13be:	20 83       	st	Z, r18
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    13c0:	e0 91 17 21 	lds	r30, 0x2117
    13c4:	f0 91 18 21 	lds	r31, 0x2118
    13c8:	21 81       	ldd	r18, Z+1	; 0x01
    13ca:	25 fd       	sbrc	r18, 5
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <uart_transmit+0x48>
    13ce:	16 c0       	rjmp	.+44     	; 0x13fc <uart_transmit+0x70>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    13d0:	8b e1       	ldi	r24, 0x1B	; 27
    13d2:	90 e2       	ldi	r25, 0x20	; 32
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    13d4:	30 91 1a 20 	lds	r19, 0x201A
    13d8:	20 91 16 21 	lds	r18, 0x2116
    13dc:	32 17       	cp	r19, r18
    13de:	30 f0       	brcs	.+12     	; 0x13ec <uart_transmit+0x60>
		return (uart_head - uart_tail);
    13e0:	20 91 1a 20 	lds	r18, 0x201A
    13e4:	30 91 16 21 	lds	r19, 0x2116
    13e8:	23 1b       	sub	r18, r19
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <uart_transmit+0x6c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    13ec:	20 91 1a 20 	lds	r18, 0x201A
    13f0:	30 91 16 21 	lds	r19, 0x2116
    13f4:	26 50       	subi	r18, 0x06	; 6
    13f6:	23 1b       	sub	r18, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    13f8:	22 23       	and	r18, r18
    13fa:	81 f6       	brne	.-96     	; 0x139c <uart_transmit+0x10>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    13fc:	90 91 1a 20 	lds	r25, 0x201A
    1400:	80 91 16 21 	lds	r24, 0x2116
    1404:	98 17       	cp	r25, r24
    1406:	30 f0       	brcs	.+12     	; 0x1414 <uart_transmit+0x88>
		return (uart_head - uart_tail);
    1408:	80 91 1a 20 	lds	r24, 0x201A
    140c:	90 91 16 21 	lds	r25, 0x2116
    1410:	89 1b       	sub	r24, r25
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <uart_transmit+0x94>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1414:	80 91 1a 20 	lds	r24, 0x201A
    1418:	90 91 16 21 	lds	r25, 0x2116
    141c:	86 50       	subi	r24, 0x06	; 6
    141e:	89 1b       	sub	r24, r25
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		port->DATA = uart_dequeue();
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    1420:	88 23       	and	r24, r24
    1422:	19 f0       	breq	.+6      	; 0x142a <uart_transmit+0x9e>
    1424:	0e 94 b6 09 	call	0x136c	; 0x136c <uart_txbuffer_enable>
    1428:	08 95       	ret
	else uart_txbuffer_disable();
    142a:	0e 94 be 09 	call	0x137c	; 0x137c <uart_txbuffer_disable>
    142e:	08 95       	ret

00001430 <__vector_59>:
//** [PORT SPECIFIC CODE]
//************************************************************************
//************************************************************************

//DATA TRANSMIT COMPLETE
SIGNAL(USARTE0_DRE_vect){
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1452:	e0 91 17 21 	lds	r30, 0x2117
    1456:	f0 91 18 21 	lds	r31, 0x2118
    145a:	81 81       	ldd	r24, Z+1	; 0x01
    145c:	85 fd       	sbrc	r24, 5
    145e:	1b c0       	rjmp	.+54     	; 0x1496 <__vector_59+0x66>
    1460:	30 c0       	rjmp	.+96     	; 0x14c2 <__vector_59+0x92>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    1462:	20 91 16 21 	lds	r18, 0x2116
	uart_tail++;
    1466:	30 91 16 21 	lds	r19, 0x2116
    146a:	3f 5f       	subi	r19, 0xFF	; 255
    146c:	30 93 16 21 	sts	0x2116, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    1470:	30 91 16 21 	lds	r19, 0x2116
    1474:	3a 3f       	cpi	r19, 0xFA	; 250
    1476:	10 f0       	brcs	.+4      	; 0x147c <__vector_59+0x4c>
		uart_tail = 0;
    1478:	10 92 16 21 	sts	0x2116, r1
	}
	return uart_buffer[oldtail];
    147c:	dc 01       	movw	r26, r24
    147e:	a2 0f       	add	r26, r18
    1480:	b1 1d       	adc	r27, r1
    1482:	2c 91       	ld	r18, X
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		port->DATA = uart_dequeue();
    1484:	20 83       	st	Z, r18
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1486:	e0 91 17 21 	lds	r30, 0x2117
    148a:	f0 91 18 21 	lds	r31, 0x2118
    148e:	21 81       	ldd	r18, Z+1	; 0x01
    1490:	25 fd       	sbrc	r18, 5
    1492:	03 c0       	rjmp	.+6      	; 0x149a <__vector_59+0x6a>
    1494:	16 c0       	rjmp	.+44     	; 0x14c2 <__vector_59+0x92>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    1496:	8b e1       	ldi	r24, 0x1B	; 27
    1498:	90 e2       	ldi	r25, 0x20	; 32
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    149a:	30 91 1a 20 	lds	r19, 0x201A
    149e:	20 91 16 21 	lds	r18, 0x2116
    14a2:	32 17       	cp	r19, r18
    14a4:	30 f0       	brcs	.+12     	; 0x14b2 <__vector_59+0x82>
		return (uart_head - uart_tail);
    14a6:	20 91 1a 20 	lds	r18, 0x201A
    14aa:	30 91 16 21 	lds	r19, 0x2116
    14ae:	23 1b       	sub	r18, r19
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <__vector_59+0x8e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    14b2:	20 91 1a 20 	lds	r18, 0x201A
    14b6:	30 91 16 21 	lds	r19, 0x2116
    14ba:	26 50       	subi	r18, 0x06	; 6
    14bc:	23 1b       	sub	r18, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    14be:	22 23       	and	r18, r18
    14c0:	81 f6       	brne	.-96     	; 0x1462 <__vector_59+0x32>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    14c2:	90 91 1a 20 	lds	r25, 0x201A
    14c6:	80 91 16 21 	lds	r24, 0x2116
    14ca:	98 17       	cp	r25, r24
    14cc:	30 f0       	brcs	.+12     	; 0x14da <__vector_59+0xaa>
		return (uart_head - uart_tail);
    14ce:	80 91 1a 20 	lds	r24, 0x201A
    14d2:	90 91 16 21 	lds	r25, 0x2116
    14d6:	89 1b       	sub	r24, r25
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <__vector_59+0xb6>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    14da:	80 91 1a 20 	lds	r24, 0x201A
    14de:	90 91 16 21 	lds	r25, 0x2116
    14e2:	86 50       	subi	r24, 0x06	; 6
    14e4:	89 1b       	sub	r24, r25
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		port->DATA = uart_dequeue();
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    14e6:	88 23       	and	r24, r24
    14e8:	19 f0       	breq	.+6      	; 0x14f0 <__vector_59+0xc0>
    14ea:	0e 94 b6 09 	call	0x136c	; 0x136c <uart_txbuffer_enable>
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <__vector_59+0xc4>
	else uart_txbuffer_disable();
    14f0:	0e 94 be 09 	call	0x137c	; 0x137c <uart_txbuffer_disable>
//************************************************************************

//DATA TRANSMIT COMPLETE
SIGNAL(USARTE0_DRE_vect){
	uart_transmit();	
}
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <init_uart_obuffer>:
/** Insert from head. Read from tail. The goal is to be fast (very fast) and light.
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(void){
	uart_head = 0;
    1516:	10 92 1a 20 	sts	0x201A, r1
	uart_tail = 0;
    151a:	10 92 16 21 	sts	0x2116, r1
}
    151e:	08 95       	ret

00001520 <init_uart_buffer>:
	else uart_txbuffer_disable();
}

void init_uart_buffer(USART_t* which){
	//Setup UART hardware
		port = which;
    1520:	80 93 17 21 	sts	0x2117, r24
    1524:	90 93 18 21 	sts	0x2118, r25

	//Setup data buffers
		init_uart_obuffer();
    1528:	0e 94 8b 0a 	call	0x1516	; 0x1516 <init_uart_obuffer>
		//init_uart_ibuffer(); //not implemented yet!
}
    152c:	08 95       	ret

0000152e <uart_count>:
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    152e:	90 91 1a 20 	lds	r25, 0x201A
    1532:	80 91 16 21 	lds	r24, 0x2116
    1536:	98 17       	cp	r25, r24
    1538:	30 f0       	brcs	.+12     	; 0x1546 <uart_count+0x18>
		return (uart_head - uart_tail);
    153a:	80 91 1a 20 	lds	r24, 0x201A
    153e:	90 91 16 21 	lds	r25, 0x2116
    1542:	89 1b       	sub	r24, r25
    1544:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1546:	80 91 1a 20 	lds	r24, 0x201A
    154a:	90 91 16 21 	lds	r25, 0x2116
    154e:	86 50       	subi	r24, 0x06	; 6
    1550:	89 1b       	sub	r24, r25
	}
}
    1552:	08 95       	ret

00001554 <uart_enqueue>:
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    1554:	90 91 1a 20 	lds	r25, 0x201A
    1558:	eb e1       	ldi	r30, 0x1B	; 27
    155a:	f0 e2       	ldi	r31, 0x20	; 32
    155c:	e9 0f       	add	r30, r25
    155e:	f1 1d       	adc	r31, r1
    1560:	80 83       	st	Z, r24
	uart_head++;
    1562:	80 91 1a 20 	lds	r24, 0x201A
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	80 93 1a 20 	sts	0x201A, r24
	if (uart_head >= MAX_BUFFER_LEN){
    156c:	80 91 1a 20 	lds	r24, 0x201A
    1570:	8a 3f       	cpi	r24, 0xFA	; 250
    1572:	10 f0       	brcs	.+4      	; 0x1578 <uart_enqueue+0x24>
		uart_head = 0;
    1574:	10 92 1a 20 	sts	0x201A, r1
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1578:	e0 91 17 21 	lds	r30, 0x2117
    157c:	f0 91 18 21 	lds	r31, 0x2118
    1580:	81 81       	ldd	r24, Z+1	; 0x01
    1582:	85 fd       	sbrc	r24, 5
    1584:	1b c0       	rjmp	.+54     	; 0x15bc <uart_enqueue+0x68>
    1586:	30 c0       	rjmp	.+96     	; 0x15e8 <uart_enqueue+0x94>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    1588:	20 91 16 21 	lds	r18, 0x2116
	uart_tail++;
    158c:	30 91 16 21 	lds	r19, 0x2116
    1590:	3f 5f       	subi	r19, 0xFF	; 255
    1592:	30 93 16 21 	sts	0x2116, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    1596:	30 91 16 21 	lds	r19, 0x2116
    159a:	3a 3f       	cpi	r19, 0xFA	; 250
    159c:	10 f0       	brcs	.+4      	; 0x15a2 <uart_enqueue+0x4e>
		uart_tail = 0;
    159e:	10 92 16 21 	sts	0x2116, r1
	}
	return uart_buffer[oldtail];
    15a2:	dc 01       	movw	r26, r24
    15a4:	a2 0f       	add	r26, r18
    15a6:	b1 1d       	adc	r27, r1
    15a8:	2c 91       	ld	r18, X
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		port->DATA = uart_dequeue();
    15aa:	20 83       	st	Z, r18
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    15ac:	e0 91 17 21 	lds	r30, 0x2117
    15b0:	f0 91 18 21 	lds	r31, 0x2118
    15b4:	21 81       	ldd	r18, Z+1	; 0x01
    15b6:	25 fd       	sbrc	r18, 5
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <uart_enqueue+0x6c>
    15ba:	16 c0       	rjmp	.+44     	; 0x15e8 <uart_enqueue+0x94>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    15bc:	8b e1       	ldi	r24, 0x1B	; 27
    15be:	90 e2       	ldi	r25, 0x20	; 32
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    15c0:	30 91 1a 20 	lds	r19, 0x201A
    15c4:	20 91 16 21 	lds	r18, 0x2116
    15c8:	32 17       	cp	r19, r18
    15ca:	30 f0       	brcs	.+12     	; 0x15d8 <uart_enqueue+0x84>
		return (uart_head - uart_tail);
    15cc:	20 91 1a 20 	lds	r18, 0x201A
    15d0:	30 91 16 21 	lds	r19, 0x2116
    15d4:	23 1b       	sub	r18, r19
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <uart_enqueue+0x90>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    15d8:	20 91 1a 20 	lds	r18, 0x201A
    15dc:	30 91 16 21 	lds	r19, 0x2116
    15e0:	26 50       	subi	r18, 0x06	; 6
    15e2:	23 1b       	sub	r18, r19
//Starts a transmission out of the UART if the UART is ready to receive data
//and we have data to send. (helper function to the ISR so that we can initiate 
//the first transfer
void inline uart_transmit(){
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    15e4:	22 23       	and	r18, r18
    15e6:	81 f6       	brne	.-96     	; 0x1588 <uart_enqueue+0x34>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    15e8:	90 91 1a 20 	lds	r25, 0x201A
    15ec:	80 91 16 21 	lds	r24, 0x2116
    15f0:	98 17       	cp	r25, r24
    15f2:	30 f0       	brcs	.+12     	; 0x1600 <uart_enqueue+0xac>
		return (uart_head - uart_tail);
    15f4:	80 91 1a 20 	lds	r24, 0x201A
    15f8:	90 91 16 21 	lds	r25, 0x2116
    15fc:	89 1b       	sub	r24, r25
    15fe:	06 c0       	rjmp	.+12     	; 0x160c <uart_enqueue+0xb8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1600:	80 91 1a 20 	lds	r24, 0x201A
    1604:	90 91 16 21 	lds	r25, 0x2116
    1608:	86 50       	subi	r24, 0x06	; 6
    160a:	89 1b       	sub	r24, r25
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		port->DATA = uart_dequeue();
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    160c:	88 23       	and	r24, r24
    160e:	19 f0       	breq	.+6      	; 0x1616 <uart_enqueue+0xc2>
    1610:	0e 94 b6 09 	call	0x136c	; 0x136c <uart_txbuffer_enable>
    1614:	08 95       	ret
	else uart_txbuffer_disable();
    1616:	0e 94 be 09 	call	0x137c	; 0x137c <uart_txbuffer_disable>
    161a:	08 95       	ret

0000161c <uart_dequeue>:
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    161c:	80 91 16 21 	lds	r24, 0x2116
	uart_tail++;
    1620:	90 91 16 21 	lds	r25, 0x2116
    1624:	9f 5f       	subi	r25, 0xFF	; 255
    1626:	90 93 16 21 	sts	0x2116, r25
	if (uart_tail >= MAX_BUFFER_LEN){
    162a:	90 91 16 21 	lds	r25, 0x2116
    162e:	9a 3f       	cpi	r25, 0xFA	; 250
    1630:	10 f0       	brcs	.+4      	; 0x1636 <uart_dequeue+0x1a>
		uart_tail = 0;
    1632:	10 92 16 21 	sts	0x2116, r1
	}
	return uart_buffer[oldtail];
    1636:	eb e1       	ldi	r30, 0x1B	; 27
    1638:	f0 e2       	ldi	r31, 0x20	; 32
    163a:	e8 0f       	add	r30, r24
    163c:	f1 1d       	adc	r31, r1
    163e:	80 81       	ld	r24, Z
}
    1640:	08 95       	ret

00001642 <init_uart_ibuffer>:
/** Insert from head. Read from tail. The goal is to be fast (very fast) and light.
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(void){
	uart_ihead = 0;
    1642:	10 92 15 21 	sts	0x2115, r1
	uart_itail = 0;
    1646:	10 92 0f 20 	sts	0x200F, r1
}
    164a:	08 95       	ret

0000164c <uart_icount>:

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    164c:	90 91 15 21 	lds	r25, 0x2115
    1650:	80 91 0f 20 	lds	r24, 0x200F
    1654:	98 17       	cp	r25, r24
    1656:	30 f0       	brcs	.+12     	; 0x1664 <uart_icount+0x18>
		return (uart_ihead - uart_itail);
    1658:	80 91 15 21 	lds	r24, 0x2115
    165c:	90 91 0f 20 	lds	r25, 0x200F
    1660:	89 1b       	sub	r24, r25
    1662:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    1664:	80 91 15 21 	lds	r24, 0x2115
    1668:	90 91 0f 20 	lds	r25, 0x200F
    166c:	86 5f       	subi	r24, 0xF6	; 246
    166e:	89 1b       	sub	r24, r25
	}
}
    1670:	08 95       	ret

00001672 <uart_ienqueue>:

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    1672:	90 91 15 21 	lds	r25, 0x2115
    1676:	e0 e1       	ldi	r30, 0x10	; 16
    1678:	f0 e2       	ldi	r31, 0x20	; 32
    167a:	e9 0f       	add	r30, r25
    167c:	f1 1d       	adc	r31, r1
    167e:	80 83       	st	Z, r24
	uart_ihead++;
    1680:	80 91 15 21 	lds	r24, 0x2115
    1684:	8f 5f       	subi	r24, 0xFF	; 255
    1686:	80 93 15 21 	sts	0x2115, r24
	if (uart_ihead >= MAX_IBUFFER_LEN){
    168a:	80 91 15 21 	lds	r24, 0x2115
    168e:	8a 30       	cpi	r24, 0x0A	; 10
    1690:	10 f0       	brcs	.+4      	; 0x1696 <uart_ienqueue+0x24>
		uart_ihead = 0;
    1692:	10 92 15 21 	sts	0x2115, r1
    1696:	08 95       	ret

00001698 <uart_idequeue>:
	}
}

inline uint8_t uart_idequeue(void){
	uint8_t oldtail;
	oldtail = uart_itail;
    1698:	80 91 0f 20 	lds	r24, 0x200F
	uart_itail++;
    169c:	90 91 0f 20 	lds	r25, 0x200F
    16a0:	9f 5f       	subi	r25, 0xFF	; 255
    16a2:	90 93 0f 20 	sts	0x200F, r25
	if (uart_itail >= MAX_IBUFFER_LEN){
    16a6:	90 91 0f 20 	lds	r25, 0x200F
    16aa:	9a 30       	cpi	r25, 0x0A	; 10
    16ac:	10 f0       	brcs	.+4      	; 0x16b2 <uart_idequeue+0x1a>
		uart_itail = 0;
    16ae:	10 92 0f 20 	sts	0x200F, r1
	}
	return uart_ibuffer[oldtail];
    16b2:	e0 e1       	ldi	r30, 0x10	; 16
    16b4:	f0 e2       	ldi	r31, 0x20	; 32
    16b6:	e8 0f       	add	r30, r24
    16b8:	f1 1d       	adc	r31, r1
    16ba:	80 81       	ld	r24, Z
}
    16bc:	08 95       	ret

000016be <init_ui>:

//Handles all UI hardware (buttons, switches, and lights)

void init_ui(){
	//LED's are located at PD0 (Middle) and PD4 (Left)
	PORTD.DIRSET = 0x11; //pins 0 and 4 to output
    16be:	e0 e6       	ldi	r30, 0x60	; 96
    16c0:	f6 e0       	ldi	r31, 0x06	; 6
    16c2:	81 e1       	ldi	r24, 0x11	; 17
    16c4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0x11; //pins 0 and 4 to high (off)
    16c6:	85 83       	std	Z+5, r24	; 0x05
	PORTD.PIN0CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    16c8:	80 e4       	ldi	r24, 0x40	; 64
    16ca:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    16cc:	84 8b       	std	Z+20, r24	; 0x14
	TCD0.CTRLA = 0x07; //enable; div1024
    16ce:	e0 e0       	ldi	r30, 0x00	; 0
    16d0:	f9 e0       	ldi	r31, 0x09	; 9
    16d2:	57 e0       	ldi	r21, 0x07	; 7
    16d4:	50 83       	st	Z, r21
	TCD0.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    16d6:	43 e1       	ldi	r20, 0x13	; 19
    16d8:	41 83       	std	Z+1, r20	; 0x01
	TCD0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    16da:	8f ef       	ldi	r24, 0xFF	; 255
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	86 a3       	lds	r24, 0x56
    16e0:	97 a3       	lds	r25, 0x57
	TCD0.CCA = 0x0080; //Default to off-level brightness
    16e2:	20 e8       	ldi	r18, 0x80	; 128
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	20 a7       	lds	r18, 0x70
    16e8:	31 a7       	lds	r19, 0x71
	TCD1.CTRLA = 0x07; //enable; div1024
    16ea:	e0 e4       	ldi	r30, 0x40	; 64
    16ec:	f9 e0       	ldi	r31, 0x09	; 9
    16ee:	50 83       	st	Z, r21
	TCD1.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    16f0:	41 83       	std	Z+1, r20	; 0x01
	TCD1.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    16f2:	86 a3       	lds	r24, 0x56
    16f4:	97 a3       	lds	r25, 0x57
	TCD1.CCA = 0x0010; //Default to off-level brightness
    16f6:	80 e1       	ldi	r24, 0x10	; 16
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	80 a7       	lds	r24, 0x70
    16fc:	91 a7       	lds	r25, 0x71

	//Switches need pull-up resistance
	//	Switches: PC5 = SW1; PC4 = SW2; PC3 = SW3
	PORTC.DIRCLR = B8(00111100); //This is the default condition, but just to be safe
    16fe:	e0 e4       	ldi	r30, 0x40	; 64
    1700:	f6 e0       	ldi	r31, 0x06	; 6
    1702:	8c e3       	ldi	r24, 0x3C	; 60
    1704:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN5CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges
    1706:	88 e9       	ldi	r24, 0x98	; 152
    1708:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN4CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges
    170a:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN3CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges	
    170c:	83 8b       	std	Z+19, r24	; 0x13
	//Button requirements
	//	Button Interrupt Controls
	//	Button: PC2 = Button0
	#define RISING_EDGE 	B8(10011001) //Slew rate limiter on; Internal pull-up on; Sense on rising input edges
	#define FALLING_EDGE 	B8(10011010) //Slew rate limiter on; Internal pull-up on; Sense on falling input edges
	PORTC.INT0MASK = B8(00000100); //Enable interrupt0 channel for PC2 
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.INTCTRL = B8(00000011); //interrupt0 channel set to high priority
    1712:	83 e0       	ldi	r24, 0x03	; 3
    1714:	81 87       	std	Z+9, r24	; 0x09
	PORTC.PIN2CTRL = FALLING_EDGE; 
    1716:	8a e9       	ldi	r24, 0x9A	; 154
    1718:	82 8b       	std	Z+18, r24	; 0x12
	STATE_Button = BUTTON_IDLE;
    171a:	10 92 07 20 	sts	0x2007, r1
}
    171e:	08 95       	ret

00001720 <led_dim>:
void led_on(uint8_t which){led_dim(which, 0xff);}

void led_off(uint8_t which){led_dim(which, 0x00);}

void led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    1720:	88 23       	and	r24, r24
    1722:	19 f0       	breq	.+6      	; 0x172a <led_dim+0xa>
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	61 f4       	brne	.+24     	; 0x1740 <led_dim+0x20>
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <led_dim+0x16>
	case LED_LEFT:
		TCD1.CCABUF = (uint16_t)brightness;		
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	e0 e4       	ldi	r30, 0x40	; 64
    172e:	f9 e0       	ldi	r31, 0x09	; 9
    1730:	60 af       	sts	0x70, r22
    1732:	71 af       	sts	0x71, r23
		break;
    1734:	08 95       	ret
	case LED_MID:
		TCD0.CCABUF = (uint16_t)brightness;		
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	e0 e0       	ldi	r30, 0x00	; 0
    173a:	f9 e0       	ldi	r31, 0x09	; 9
    173c:	60 af       	sts	0x70, r22
    173e:	71 af       	sts	0x71, r23
    1740:	08 95       	ret

00001742 <led_off>:
//## LEDs
//#############################################################

void led_on(uint8_t which){led_dim(which, 0xff);}

void led_off(uint8_t which){led_dim(which, 0x00);}
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	0e 94 90 0b 	call	0x1720	; 0x1720 <led_dim>
    1748:	08 95       	ret

0000174a <led_on>:

//#############################################################
//## LEDs
//#############################################################

void led_on(uint8_t which){led_dim(which, 0xff);}
    174a:	6f ef       	ldi	r22, 0xFF	; 255
    174c:	0e 94 90 0b 	call	0x1720	; 0x1720 <led_dim>
    1750:	08 95       	ret

00001752 <led_toggle>:
		break;
	}
}

void led_toggle(uint8_t which){
	switch(which){
    1752:	88 23       	and	r24, r24
    1754:	19 f0       	breq	.+6      	; 0x175c <led_toggle+0xa>
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	61 f4       	brne	.+24     	; 0x1772 <led_toggle+0x20>
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <led_toggle+0x16>
	case LED_LEFT:
		TCD1.CCAL = ~TCD1.CCAL;		
    175c:	e0 e4       	ldi	r30, 0x40	; 64
    175e:	f9 e0       	ldi	r31, 0x09	; 9
    1760:	80 a5       	lds	r24, 0x60
    1762:	80 95       	com	r24
    1764:	80 a7       	lds	r24, 0x70
		break;
    1766:	08 95       	ret
	case LED_MID:
		TCD0.CCAL = ~TCD0.CCAL;		
    1768:	e0 e0       	ldi	r30, 0x00	; 0
    176a:	f9 e0       	ldi	r31, 0x09	; 9
    176c:	80 a5       	lds	r24, 0x60
    176e:	80 95       	com	r24
    1770:	80 a7       	lds	r24, 0x70
    1772:	08 95       	ret

00001774 <service_leds>:
	}
}

void service_leds(){

}
    1774:	08 95       	ret

00001776 <__vector_2>:
//#############################################################
//## BUTTON -- Interrupt driven
//#############################################################

//Caution with programatic use as I do not implement switch debouncing
SIGNAL(PORTC_INT0_vect){
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	8f 93       	push	r24
    1782:	ef 93       	push	r30
    1784:	ff 93       	push	r31
	if (PORTC.PIN2CTRL == FALLING_EDGE){
    1786:	e0 e4       	ldi	r30, 0x40	; 64
    1788:	f6 e0       	ldi	r31, 0x06	; 6
    178a:	82 89       	ldd	r24, Z+18	; 0x12
    178c:	8a 39       	cpi	r24, 0x9A	; 154
    178e:	31 f4       	brne	.+12     	; 0x179c <__vector_2+0x26>
		//Just detected a falling edge (button has been pressed in)
		PORTC.PIN2CTRL = RISING_EDGE;
    1790:	89 e9       	ldi	r24, 0x99	; 153
    1792:	82 8b       	std	Z+18, r24	; 0x12
		STATE_Button = BUTTON_PUSHED;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	80 93 07 20 	sts	0x2007, r24
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <__vector_2+0x34>
	}
	else {
		//Just detected a rising edge (button has been released)
		PORTC.PIN2CTRL = FALLING_EDGE;
    179c:	8a e9       	ldi	r24, 0x9A	; 154
    179e:	e0 e4       	ldi	r30, 0x40	; 64
    17a0:	f6 e0       	ldi	r31, 0x06	; 6
    17a2:	82 8b       	std	Z+18, r24	; 0x12
		STATE_Button = BUTTON_RELEASED;
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	80 93 07 20 	sts	0x2007, r24
	}
}
    17aa:	ff 91       	pop	r31
    17ac:	ef 91       	pop	r30
    17ae:	8f 91       	pop	r24
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <service_button>:
		//Actions when the button is pushed and held down
	}
	else {
		//Actions when the button is not pressed or held
	}
}
    17ba:	08 95       	ret

000017bc <sw_on>:
//## SWITCHESs -- Polling only
//#############################################################

//	Switches: PC5 = SW1; PC4 = SW2; PC3 = SW3
boolean sw_on(uint8_t which){
	switch(which){
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	69 f0       	breq	.+26     	; 0x17da <sw_on+0x1e>
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	18 f0       	brcs	.+6      	; 0x17ca <sw_on+0xe>
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	c9 f4       	brne	.+50     	; 0x17fa <sw_on+0x3e>
    17c8:	10 c0       	rjmp	.+32     	; 0x17ea <sw_on+0x2e>
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
    17ca:	e0 e4       	ldi	r30, 0x40	; 64
    17cc:	f6 e0       	ldi	r31, 0x06	; 6
    17ce:	90 85       	ldd	r25, Z+8	; 0x08
			//Switch is closed (on)
			return true;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	95 ff       	sbrs	r25, 5
    17d4:	13 c0       	rjmp	.+38     	; 0x17fc <sw_on+0x40>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	case SW2:
		if ((PORTC.IN & _BV(4)) == 0x00){
    17da:	e0 e4       	ldi	r30, 0x40	; 64
    17dc:	f6 e0       	ldi	r31, 0x06	; 6
    17de:	90 85       	ldd	r25, Z+8	; 0x08
boolean sw_on(uint8_t which){
	switch(which){
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
			//Switch is closed (on)
			return true;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	94 ff       	sbrs	r25, 4
    17e4:	0b c0       	rjmp	.+22     	; 0x17fc <sw_on+0x40>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	case SW3:
		if ((PORTC.IN & _BV(3)) == 0x00){
    17ea:	e0 e4       	ldi	r30, 0x40	; 64
    17ec:	f6 e0       	ldi	r31, 0x06	; 6
    17ee:	90 85       	ldd	r25, Z+8	; 0x08
boolean sw_on(uint8_t which){
	switch(which){
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
			//Switch is closed (on)
			return true;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	93 ff       	sbrs	r25, 3
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <sw_on+0x40>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	default:
		return false;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    17fc:	08 95       	ret

000017fe <service_switches>:

void service_switches(){
	static uint8_t mode = 0; //Store prior MODE state

	//[Switch 1] Audio vs. Photodiode Mode -- use pwm.c / pwm_mode() to test condition
	if (sw_on(SW1) == true){
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sw_on>
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	51 f4       	brne	.+20     	; 0x181c <service_switches+0x1e>
		if (mode != MODE_AUDIO){
    1808:	80 91 06 20 	lds	r24, 0x2006
    180c:	85 33       	cpi	r24, 0x35	; 53
    180e:	79 f0       	breq	.+30     	; 0x182e <service_switches+0x30>
			//Just changed modes into AUDIO mode!
			mode = MODE_AUDIO; //update state
    1810:	85 e3       	ldi	r24, 0x35	; 53
    1812:	80 93 06 20 	sts	0x2006, r24
			pwm_enable(); //turn on AUDIO mode interrupts and configure!
    1816:	0e 94 a2 03 	call	0x744	; 0x744 <pwm_enable>
    181a:	09 c0       	rjmp	.+18     	; 0x182e <service_switches+0x30>
		}
	}
	else {
		if (mode != MODE_PHOTO){
    181c:	80 91 06 20 	lds	r24, 0x2006
    1820:	86 33       	cpi	r24, 0x36	; 54
    1822:	29 f0       	breq	.+10     	; 0x182e <service_switches+0x30>
			//Just changed modes into PHOTO mode!
			mode = MODE_PHOTO; //update state
    1824:	86 e3       	ldi	r24, 0x36	; 54
    1826:	80 93 06 20 	sts	0x2006, r24
			pwm_disable();
    182a:	0e 94 c6 03 	call	0x78c	; 0x78c <pwm_disable>
		}
	}
	//[Switch 2] Output polarity
	if (sw_on(SW2) == true){
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sw_on>
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	61 f4       	brne	.+24     	; 0x1850 <service_switches+0x52>
		if (pwm_mode() == false) ac_polarity(IDLE_HIGH);
    1838:	0e 94 ce 03 	call	0x79c	; 0x79c <pwm_mode>
    183c:	88 23       	and	r24, r24
    183e:	21 f4       	brne	.+8      	; 0x1848 <service_switches+0x4a>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	0e 94 00 01 	call	0x200	; 0x200 <ac_polarity>
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <service_switches+0x68>
		else pwm_polarity(NEGATIVE_PULSE);
    1848:	88 e5       	ldi	r24, 0x58	; 88
    184a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <pwm_polarity>
    184e:	0b c0       	rjmp	.+22     	; 0x1866 <service_switches+0x68>
	}
	else {
		if (pwm_mode() == false) ac_polarity(IDLE_LOW);
    1850:	0e 94 ce 03 	call	0x79c	; 0x79c <pwm_mode>
    1854:	88 23       	and	r24, r24
    1856:	21 f4       	brne	.+8      	; 0x1860 <service_switches+0x62>
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	0e 94 00 01 	call	0x200	; 0x200 <ac_polarity>
    185e:	03 c0       	rjmp	.+6      	; 0x1866 <service_switches+0x68>
		else pwm_polarity(POSITIVE_PULSE);
    1860:	87 e5       	ldi	r24, 0x57	; 87
    1862:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <pwm_polarity>
	}
	//[Switch 3] Hysteresis enable
	if (sw_on(SW3) == true){
    1866:	82 e0       	ldi	r24, 0x02	; 2
    1868:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sw_on>
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	41 f4       	brne	.+16     	; 0x1880 <service_switches+0x82>
		if (pwm_mode() == false) ac_hysteresis(LARGE);
    1870:	0e 94 ce 03 	call	0x79c	; 0x79c <pwm_mode>
    1874:	88 23       	and	r24, r24
    1876:	51 f4       	brne	.+20     	; 0x188c <service_switches+0x8e>
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ac_hysteresis>
    187e:	08 95       	ret
	}
	else {
		if (pwm_mode() == false) ac_hysteresis(NONE);
    1880:	0e 94 ce 03 	call	0x79c	; 0x79c <pwm_mode>
    1884:	88 23       	and	r24, r24
    1886:	11 f4       	brne	.+4      	; 0x188c <service_switches+0x8e>
    1888:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ac_hysteresis>
    188c:	08 95       	ret

0000188e <__udivmodsi4>:
    188e:	a1 e2       	ldi	r26, 0x21	; 33
    1890:	1a 2e       	mov	r1, r26
    1892:	aa 1b       	sub	r26, r26
    1894:	bb 1b       	sub	r27, r27
    1896:	fd 01       	movw	r30, r26
    1898:	0d c0       	rjmp	.+26     	; 0x18b4 <__udivmodsi4_ep>

0000189a <__udivmodsi4_loop>:
    189a:	aa 1f       	adc	r26, r26
    189c:	bb 1f       	adc	r27, r27
    189e:	ee 1f       	adc	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	a2 17       	cp	r26, r18
    18a4:	b3 07       	cpc	r27, r19
    18a6:	e4 07       	cpc	r30, r20
    18a8:	f5 07       	cpc	r31, r21
    18aa:	20 f0       	brcs	.+8      	; 0x18b4 <__udivmodsi4_ep>
    18ac:	a2 1b       	sub	r26, r18
    18ae:	b3 0b       	sbc	r27, r19
    18b0:	e4 0b       	sbc	r30, r20
    18b2:	f5 0b       	sbc	r31, r21

000018b4 <__udivmodsi4_ep>:
    18b4:	66 1f       	adc	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	88 1f       	adc	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	1a 94       	dec	r1
    18be:	69 f7       	brne	.-38     	; 0x189a <__udivmodsi4_loop>
    18c0:	60 95       	com	r22
    18c2:	70 95       	com	r23
    18c4:	80 95       	com	r24
    18c6:	90 95       	com	r25
    18c8:	9b 01       	movw	r18, r22
    18ca:	ac 01       	movw	r20, r24
    18cc:	bd 01       	movw	r22, r26
    18ce:	cf 01       	movw	r24, r30
    18d0:	08 95       	ret

000018d2 <_exit>:
    18d2:	f8 94       	cli

000018d4 <__stop_program>:
    18d4:	ff cf       	rjmp	.-2      	; 0x18d4 <__stop_program>
